// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wjudger.proto

#include "wjudger.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace WJudger {
PROTOBUF_CONSTEXPR SimpleArgs::SimpleArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleArgsDefaultTypeInternal() {}
  union {
    SimpleArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleArgsDefaultTypeInternal _SimpleArgs_default_instance_;
PROTOBUF_CONSTEXPR SimpleReply::SimpleReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compileerrormessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.runtimeerrormessage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compileerror_)*/false
  , /*decltype(_impl_.runtimeerror_)*/0u
  , /*decltype(_impl_.timeused_)*/uint64_t{0u}
  , /*decltype(_impl_.memoryused_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SimpleReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleReplyDefaultTypeInternal() {}
  union {
    SimpleReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleReplyDefaultTypeInternal _SimpleReply_default_instance_;
PROTOBUF_CONSTEXPR JudgeArgs::JudgeArgs(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timelimit_)*/uint64_t{0u}
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_.dataid_)*/0u
  , /*decltype(_impl_.memorylimit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JudgeArgsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JudgeArgsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JudgeArgsDefaultTypeInternal() {}
  union {
    JudgeArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JudgeArgsDefaultTypeInternal _JudgeArgs_default_instance_;
PROTOBUF_CONSTEXPR JudgeReply::JudgeReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compileresult_)*/nullptr
  , /*decltype(_impl_.executeresult_)*/nullptr
  , /*decltype(_impl_.resulttype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JudgeReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JudgeReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JudgeReplyDefaultTypeInternal() {}
  union {
    JudgeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JudgeReplyDefaultTypeInternal _JudgeReply_default_instance_;
PROTOBUF_CONSTEXPR CompileResult::CompileResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.testcases_)*/{}
  , /*decltype(_impl_.compileeror_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompileResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompileResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompileResultDefaultTypeInternal() {}
  union {
    CompileResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompileResultDefaultTypeInternal _CompileResult_default_instance_;
PROTOBUF_CONSTEXPR ExecuteResult::ExecuteResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.testcase_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.verdict_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeused_)*/uint64_t{0u}
  , /*decltype(_impl_.memoryused_)*/0
  , /*decltype(_impl_.score_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecuteResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecuteResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecuteResultDefaultTypeInternal() {}
  union {
    ExecuteResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecuteResultDefaultTypeInternal _ExecuteResult_default_instance_;
}  // namespace WJudger
static ::_pb::Metadata file_level_metadata_wjudger_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_wjudger_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_wjudger_2eproto = nullptr;

const uint32_t TableStruct_wjudger_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleArgs, _impl_.token_),
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleArgs, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleArgs, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleArgs, _impl_.input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleReply, _impl_.compileerror_),
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleReply, _impl_.runtimeerror_),
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleReply, _impl_.compileerrormessage_),
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleReply, _impl_.runtimeerrormessage_),
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleReply, _impl_.timeused_),
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleReply, _impl_.memoryused_),
  PROTOBUF_FIELD_OFFSET(::WJudger::SimpleReply, _impl_.output_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WJudger::JudgeArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WJudger::JudgeArgs, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::WJudger::JudgeArgs, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::WJudger::JudgeArgs, _impl_.timelimit_),
  PROTOBUF_FIELD_OFFSET(::WJudger::JudgeArgs, _impl_.memorylimit_),
  PROTOBUF_FIELD_OFFSET(::WJudger::JudgeArgs, _impl_.dataid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WJudger::JudgeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WJudger::JudgeReply, _impl_.resulttype_),
  PROTOBUF_FIELD_OFFSET(::WJudger::JudgeReply, _impl_.compileresult_),
  PROTOBUF_FIELD_OFFSET(::WJudger::JudgeReply, _impl_.executeresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WJudger::CompileResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WJudger::CompileResult, _impl_.compileeror_),
  PROTOBUF_FIELD_OFFSET(::WJudger::CompileResult, _impl_.testcases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WJudger::ExecuteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::WJudger::ExecuteResult, _impl_.testcase_),
  PROTOBUF_FIELD_OFFSET(::WJudger::ExecuteResult, _impl_.timeused_),
  PROTOBUF_FIELD_OFFSET(::WJudger::ExecuteResult, _impl_.memoryused_),
  PROTOBUF_FIELD_OFFSET(::WJudger::ExecuteResult, _impl_.score_),
  PROTOBUF_FIELD_OFFSET(::WJudger::ExecuteResult, _impl_.verdict_),
  PROTOBUF_FIELD_OFFSET(::WJudger::ExecuteResult, _impl_.msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::WJudger::SimpleArgs)},
  { 10, -1, -1, sizeof(::WJudger::SimpleReply)},
  { 23, -1, -1, sizeof(::WJudger::JudgeArgs)},
  { 34, -1, -1, sizeof(::WJudger::JudgeReply)},
  { 43, -1, -1, sizeof(::WJudger::CompileResult)},
  { 51, -1, -1, sizeof(::WJudger::ExecuteResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::WJudger::_SimpleArgs_default_instance_._instance,
  &::WJudger::_SimpleReply_default_instance_._instance,
  &::WJudger::_JudgeArgs_default_instance_._instance,
  &::WJudger::_JudgeReply_default_instance_._instance,
  &::WJudger::_CompileResult_default_instance_._instance,
  &::WJudger::_ExecuteResult_default_instance_._instance,
};

const char descriptor_table_protodef_wjudger_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rwjudger.proto\022\007WJudger\"]\n\nSimpleArgs\022\r"
  "\n\005token\030\001 \001(\t\022\014\n\004code\030\002 \001(\t\022#\n\010language\030"
  "\003 \001(\0162\021.WJudger.Language\022\r\n\005input\030\004 \001(\t\""
  "\251\001\n\013SimpleReply\022\024\n\014compileError\030\001 \001(\010\022\024\n"
  "\014runtimeError\030\002 \001(\r\022\033\n\023compileErrorMessa"
  "ge\030\003 \001(\t\022\033\n\023runtimeErrorMessage\030\004 \001(\t\022\020\n"
  "\010timeused\030\005 \001(\004\022\022\n\nmemoryused\030\006 \001(\001\022\016\n\006o"
  "utput\030\007 \001(\t\"v\n\tJudgeArgs\022\014\n\004code\030\001 \001(\t\022#"
  "\n\010language\030\002 \001(\0162\021.WJudger.Language\022\021\n\tt"
  "imelimit\030\003 \001(\004\022\023\n\013memorylimit\030\004 \001(\001\022\016\n\006d"
  "ataId\030\005 \001(\r\"\306\001\n\nJudgeReply\0222\n\nresultType"
  "\030\001 \001(\0162\036.WJudger.JudgeReply.ResultType\022-"
  "\n\rcompileResult\030\002 \001(\0132\026.WJudger.CompileR"
  "esult\022-\n\rexecuteResult\030\003 \001(\0132\026.WJudger.E"
  "xecuteResult\"&\n\nResultType\022\013\n\007COMPILE\020\000\022"
  "\013\n\007EXECUTE\020\001\"7\n\rCompileResult\022\023\n\013compile"
  "Eror\030\001 \001(\010\022\021\n\ttestcases\030\002 \003(\t\"t\n\rExecute"
  "Result\022\020\n\010testcase\030\001 \001(\t\022\020\n\010timeused\030\002 \001"
  "(\004\022\022\n\nmemoryused\030\003 \001(\001\022\r\n\005score\030\004 \001(\r\022\017\n"
  "\007verdict\030\005 \001(\t\022\013\n\003msg\030\006 \001(\t*<\n\010Language\022"
  "\005\n\001C\020\000\022\007\n\003CPP\020\001\022\n\n\006PASCAL\020\002\022\010\n\004JAVA\020\003\022\n\n"
  "\006PYTHON\020\0042v\n\007WJudger\0224\n\005Judge\022\022.WJudger."
  "JudgeArgs\032\023.WJudger.JudgeReply\"\0000\001\0225\n\006Si"
  "mple\022\023.WJudger.SimpleArgs\032\024.WJudger.Simp"
  "leReply\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_wjudger_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_wjudger_2eproto = {
    false, false, 977, descriptor_table_protodef_wjudger_2eproto,
    "wjudger.proto",
    &descriptor_table_wjudger_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_wjudger_2eproto::offsets,
    file_level_metadata_wjudger_2eproto, file_level_enum_descriptors_wjudger_2eproto,
    file_level_service_descriptors_wjudger_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_wjudger_2eproto_getter() {
  return &descriptor_table_wjudger_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_wjudger_2eproto(&descriptor_table_wjudger_2eproto);
namespace WJudger {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JudgeReply_ResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_wjudger_2eproto);
  return file_level_enum_descriptors_wjudger_2eproto[0];
}
bool JudgeReply_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr JudgeReply_ResultType JudgeReply::COMPILE;
constexpr JudgeReply_ResultType JudgeReply::EXECUTE;
constexpr JudgeReply_ResultType JudgeReply::ResultType_MIN;
constexpr JudgeReply_ResultType JudgeReply::ResultType_MAX;
constexpr int JudgeReply::ResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Language_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_wjudger_2eproto);
  return file_level_enum_descriptors_wjudger_2eproto[1];
}
bool Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SimpleArgs::_Internal {
 public:
};

SimpleArgs::SimpleArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WJudger.SimpleArgs)
}
SimpleArgs::SimpleArgs(const SimpleArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.input_){}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input().empty()) {
    _this->_impl_.input_.Set(from._internal_input(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.language_ = from._impl_.language_;
  // @@protoc_insertion_point(copy_constructor:WJudger.SimpleArgs)
}

inline void SimpleArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.input_){}
    , decltype(_impl_.language_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimpleArgs::~SimpleArgs() {
  // @@protoc_insertion_point(destructor:WJudger.SimpleArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
  _impl_.code_.Destroy();
  _impl_.input_.Destroy();
}

void SimpleArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:WJudger.SimpleArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.code_.ClearToEmpty();
  _impl_.input_.ClearToEmpty();
  _impl_.language_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WJudger.SimpleArgs.token"));
        } else
          goto handle_unusual;
        continue;
      // string code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WJudger.SimpleArgs.code"));
        } else
          goto handle_unusual;
        continue;
      // .WJudger.Language language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::WJudger::Language>(val));
        } else
          goto handle_unusual;
        continue;
      // string input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_input();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WJudger.SimpleArgs.input"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WJudger.SimpleArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WJudger.SimpleArgs.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WJudger.SimpleArgs.code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_code(), target);
  }

  // .WJudger.Language language = 3;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_language(), target);
  }

  // string input = 4;
  if (!this->_internal_input().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input().data(), static_cast<int>(this->_internal_input().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WJudger.SimpleArgs.input");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WJudger.SimpleArgs)
  return target;
}

size_t SimpleArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WJudger.SimpleArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // string code = 2;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string input = 4;
  if (!this->_internal_input().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input());
  }

  // .WJudger.Language language = 3;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleArgs::GetClassData() const { return &_class_data_; }


void SimpleArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleArgs*>(&to_msg);
  auto& from = static_cast<const SimpleArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WJudger.SimpleArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_input().empty()) {
    _this->_internal_set_input(from._internal_input());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleArgs::CopyFrom(const SimpleArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WJudger.SimpleArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleArgs::IsInitialized() const {
  return true;
}

void SimpleArgs::InternalSwap(SimpleArgs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_, lhs_arena,
      &other->_impl_.input_, rhs_arena
  );
  swap(_impl_.language_, other->_impl_.language_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wjudger_2eproto_getter, &descriptor_table_wjudger_2eproto_once,
      file_level_metadata_wjudger_2eproto[0]);
}

// ===================================================================

class SimpleReply::_Internal {
 public:
};

SimpleReply::SimpleReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WJudger.SimpleReply)
}
SimpleReply::SimpleReply(const SimpleReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SimpleReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compileerrormessage_){}
    , decltype(_impl_.runtimeerrormessage_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.compileerror_){}
    , decltype(_impl_.runtimeerror_){}
    , decltype(_impl_.timeused_){}
    , decltype(_impl_.memoryused_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.compileerrormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compileerrormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_compileerrormessage().empty()) {
    _this->_impl_.compileerrormessage_.Set(from._internal_compileerrormessage(), 
      _this->GetArenaForAllocation());
  }
  _impl_.runtimeerrormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtimeerrormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_runtimeerrormessage().empty()) {
    _this->_impl_.runtimeerrormessage_.Set(from._internal_runtimeerrormessage(), 
      _this->GetArenaForAllocation());
  }
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.compileerror_, &from._impl_.compileerror_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.memoryused_) -
    reinterpret_cast<char*>(&_impl_.compileerror_)) + sizeof(_impl_.memoryused_));
  // @@protoc_insertion_point(copy_constructor:WJudger.SimpleReply)
}

inline void SimpleReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compileerrormessage_){}
    , decltype(_impl_.runtimeerrormessage_){}
    , decltype(_impl_.output_){}
    , decltype(_impl_.compileerror_){false}
    , decltype(_impl_.runtimeerror_){0u}
    , decltype(_impl_.timeused_){uint64_t{0u}}
    , decltype(_impl_.memoryused_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.compileerrormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compileerrormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.runtimeerrormessage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.runtimeerrormessage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimpleReply::~SimpleReply() {
  // @@protoc_insertion_point(destructor:WJudger.SimpleReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.compileerrormessage_.Destroy();
  _impl_.runtimeerrormessage_.Destroy();
  _impl_.output_.Destroy();
}

void SimpleReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:WJudger.SimpleReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compileerrormessage_.ClearToEmpty();
  _impl_.runtimeerrormessage_.ClearToEmpty();
  _impl_.output_.ClearToEmpty();
  ::memset(&_impl_.compileerror_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.memoryused_) -
      reinterpret_cast<char*>(&_impl_.compileerror_)) + sizeof(_impl_.memoryused_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool compileError = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.compileerror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 runtimeError = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.runtimeerror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string compileErrorMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_compileerrormessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WJudger.SimpleReply.compileErrorMessage"));
        } else
          goto handle_unusual;
        continue;
      // string runtimeErrorMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_runtimeerrormessage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WJudger.SimpleReply.runtimeErrorMessage"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timeused = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timeused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double memoryused = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.memoryused_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string output = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WJudger.SimpleReply.output"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WJudger.SimpleReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool compileError = 1;
  if (this->_internal_compileerror() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_compileerror(), target);
  }

  // uint32 runtimeError = 2;
  if (this->_internal_runtimeerror() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_runtimeerror(), target);
  }

  // string compileErrorMessage = 3;
  if (!this->_internal_compileerrormessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compileerrormessage().data(), static_cast<int>(this->_internal_compileerrormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WJudger.SimpleReply.compileErrorMessage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_compileerrormessage(), target);
  }

  // string runtimeErrorMessage = 4;
  if (!this->_internal_runtimeerrormessage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtimeerrormessage().data(), static_cast<int>(this->_internal_runtimeerrormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WJudger.SimpleReply.runtimeErrorMessage");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_runtimeerrormessage(), target);
  }

  // uint64 timeused = 5;
  if (this->_internal_timeused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timeused(), target);
  }

  // double memoryused = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memoryused = this->_internal_memoryused();
  uint64_t raw_memoryused;
  memcpy(&raw_memoryused, &tmp_memoryused, sizeof(tmp_memoryused));
  if (raw_memoryused != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_memoryused(), target);
  }

  // string output = 7;
  if (!this->_internal_output().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WJudger.SimpleReply.output");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WJudger.SimpleReply)
  return target;
}

size_t SimpleReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WJudger.SimpleReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string compileErrorMessage = 3;
  if (!this->_internal_compileerrormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_compileerrormessage());
  }

  // string runtimeErrorMessage = 4;
  if (!this->_internal_runtimeerrormessage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtimeerrormessage());
  }

  // string output = 7;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  // bool compileError = 1;
  if (this->_internal_compileerror() != 0) {
    total_size += 1 + 1;
  }

  // uint32 runtimeError = 2;
  if (this->_internal_runtimeerror() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_runtimeerror());
  }

  // uint64 timeused = 5;
  if (this->_internal_timeused() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timeused());
  }

  // double memoryused = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memoryused = this->_internal_memoryused();
  uint64_t raw_memoryused;
  memcpy(&raw_memoryused, &tmp_memoryused, sizeof(tmp_memoryused));
  if (raw_memoryused != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SimpleReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleReply::GetClassData() const { return &_class_data_; }


void SimpleReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SimpleReply*>(&to_msg);
  auto& from = static_cast<const SimpleReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WJudger.SimpleReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_compileerrormessage().empty()) {
    _this->_internal_set_compileerrormessage(from._internal_compileerrormessage());
  }
  if (!from._internal_runtimeerrormessage().empty()) {
    _this->_internal_set_runtimeerrormessage(from._internal_runtimeerrormessage());
  }
  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  if (from._internal_compileerror() != 0) {
    _this->_internal_set_compileerror(from._internal_compileerror());
  }
  if (from._internal_runtimeerror() != 0) {
    _this->_internal_set_runtimeerror(from._internal_runtimeerror());
  }
  if (from._internal_timeused() != 0) {
    _this->_internal_set_timeused(from._internal_timeused());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memoryused = from._internal_memoryused();
  uint64_t raw_memoryused;
  memcpy(&raw_memoryused, &tmp_memoryused, sizeof(tmp_memoryused));
  if (raw_memoryused != 0) {
    _this->_internal_set_memoryused(from._internal_memoryused());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleReply::CopyFrom(const SimpleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WJudger.SimpleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleReply::IsInitialized() const {
  return true;
}

void SimpleReply::InternalSwap(SimpleReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.compileerrormessage_, lhs_arena,
      &other->_impl_.compileerrormessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.runtimeerrormessage_, lhs_arena,
      &other->_impl_.runtimeerrormessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_, lhs_arena,
      &other->_impl_.output_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleReply, _impl_.memoryused_)
      + sizeof(SimpleReply::_impl_.memoryused_)
      - PROTOBUF_FIELD_OFFSET(SimpleReply, _impl_.compileerror_)>(
          reinterpret_cast<char*>(&_impl_.compileerror_),
          reinterpret_cast<char*>(&other->_impl_.compileerror_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wjudger_2eproto_getter, &descriptor_table_wjudger_2eproto_once,
      file_level_metadata_wjudger_2eproto[1]);
}

// ===================================================================

class JudgeArgs::_Internal {
 public:
};

JudgeArgs::JudgeArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WJudger.JudgeArgs)
}
JudgeArgs::JudgeArgs(const JudgeArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JudgeArgs* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.timelimit_){}
    , decltype(_impl_.language_){}
    , decltype(_impl_.dataid_){}
    , decltype(_impl_.memorylimit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timelimit_, &from._impl_.timelimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.memorylimit_) -
    reinterpret_cast<char*>(&_impl_.timelimit_)) + sizeof(_impl_.memorylimit_));
  // @@protoc_insertion_point(copy_constructor:WJudger.JudgeArgs)
}

inline void JudgeArgs::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.timelimit_){uint64_t{0u}}
    , decltype(_impl_.language_){0}
    , decltype(_impl_.dataid_){0u}
    , decltype(_impl_.memorylimit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JudgeArgs::~JudgeArgs() {
  // @@protoc_insertion_point(destructor:WJudger.JudgeArgs)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JudgeArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
}

void JudgeArgs::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JudgeArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:WJudger.JudgeArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  ::memset(&_impl_.timelimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.memorylimit_) -
      reinterpret_cast<char*>(&_impl_.timelimit_)) + sizeof(_impl_.memorylimit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JudgeArgs::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WJudger.JudgeArgs.code"));
        } else
          goto handle_unusual;
        continue;
      // .WJudger.Language language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::WJudger::Language>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 timelimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double memorylimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.memorylimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 dataId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JudgeArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WJudger.JudgeArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WJudger.JudgeArgs.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // .WJudger.Language language = 2;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_language(), target);
  }

  // uint64 timelimit = 3;
  if (this->_internal_timelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timelimit(), target);
  }

  // double memorylimit = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memorylimit = this->_internal_memorylimit();
  uint64_t raw_memorylimit;
  memcpy(&raw_memorylimit, &tmp_memorylimit, sizeof(tmp_memorylimit));
  if (raw_memorylimit != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_memorylimit(), target);
  }

  // uint32 dataId = 5;
  if (this->_internal_dataid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dataid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WJudger.JudgeArgs)
  return target;
}

size_t JudgeArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WJudger.JudgeArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // uint64 timelimit = 3;
  if (this->_internal_timelimit() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timelimit());
  }

  // .WJudger.Language language = 2;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  // uint32 dataId = 5;
  if (this->_internal_dataid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dataid());
  }

  // double memorylimit = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memorylimit = this->_internal_memorylimit();
  uint64_t raw_memorylimit;
  memcpy(&raw_memorylimit, &tmp_memorylimit, sizeof(tmp_memorylimit));
  if (raw_memorylimit != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JudgeArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JudgeArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JudgeArgs::GetClassData() const { return &_class_data_; }


void JudgeArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JudgeArgs*>(&to_msg);
  auto& from = static_cast<const JudgeArgs&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WJudger.JudgeArgs)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (from._internal_timelimit() != 0) {
    _this->_internal_set_timelimit(from._internal_timelimit());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  if (from._internal_dataid() != 0) {
    _this->_internal_set_dataid(from._internal_dataid());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memorylimit = from._internal_memorylimit();
  uint64_t raw_memorylimit;
  memcpy(&raw_memorylimit, &tmp_memorylimit, sizeof(tmp_memorylimit));
  if (raw_memorylimit != 0) {
    _this->_internal_set_memorylimit(from._internal_memorylimit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JudgeArgs::CopyFrom(const JudgeArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WJudger.JudgeArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JudgeArgs::IsInitialized() const {
  return true;
}

void JudgeArgs::InternalSwap(JudgeArgs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JudgeArgs, _impl_.memorylimit_)
      + sizeof(JudgeArgs::_impl_.memorylimit_)
      - PROTOBUF_FIELD_OFFSET(JudgeArgs, _impl_.timelimit_)>(
          reinterpret_cast<char*>(&_impl_.timelimit_),
          reinterpret_cast<char*>(&other->_impl_.timelimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JudgeArgs::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wjudger_2eproto_getter, &descriptor_table_wjudger_2eproto_once,
      file_level_metadata_wjudger_2eproto[2]);
}

// ===================================================================

class JudgeReply::_Internal {
 public:
  static const ::WJudger::CompileResult& compileresult(const JudgeReply* msg);
  static const ::WJudger::ExecuteResult& executeresult(const JudgeReply* msg);
};

const ::WJudger::CompileResult&
JudgeReply::_Internal::compileresult(const JudgeReply* msg) {
  return *msg->_impl_.compileresult_;
}
const ::WJudger::ExecuteResult&
JudgeReply::_Internal::executeresult(const JudgeReply* msg) {
  return *msg->_impl_.executeresult_;
}
JudgeReply::JudgeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WJudger.JudgeReply)
}
JudgeReply::JudgeReply(const JudgeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JudgeReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compileresult_){nullptr}
    , decltype(_impl_.executeresult_){nullptr}
    , decltype(_impl_.resulttype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_compileresult()) {
    _this->_impl_.compileresult_ = new ::WJudger::CompileResult(*from._impl_.compileresult_);
  }
  if (from._internal_has_executeresult()) {
    _this->_impl_.executeresult_ = new ::WJudger::ExecuteResult(*from._impl_.executeresult_);
  }
  _this->_impl_.resulttype_ = from._impl_.resulttype_;
  // @@protoc_insertion_point(copy_constructor:WJudger.JudgeReply)
}

inline void JudgeReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compileresult_){nullptr}
    , decltype(_impl_.executeresult_){nullptr}
    , decltype(_impl_.resulttype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

JudgeReply::~JudgeReply() {
  // @@protoc_insertion_point(destructor:WJudger.JudgeReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JudgeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.compileresult_;
  if (this != internal_default_instance()) delete _impl_.executeresult_;
}

void JudgeReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JudgeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:WJudger.JudgeReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.compileresult_ != nullptr) {
    delete _impl_.compileresult_;
  }
  _impl_.compileresult_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.executeresult_ != nullptr) {
    delete _impl_.executeresult_;
  }
  _impl_.executeresult_ = nullptr;
  _impl_.resulttype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JudgeReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .WJudger.JudgeReply.ResultType resultType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resulttype(static_cast<::WJudger::JudgeReply_ResultType>(val));
        } else
          goto handle_unusual;
        continue;
      // .WJudger.CompileResult compileResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_compileresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .WJudger.ExecuteResult executeResult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_executeresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JudgeReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WJudger.JudgeReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .WJudger.JudgeReply.ResultType resultType = 1;
  if (this->_internal_resulttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_resulttype(), target);
  }

  // .WJudger.CompileResult compileResult = 2;
  if (this->_internal_has_compileresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::compileresult(this),
        _Internal::compileresult(this).GetCachedSize(), target, stream);
  }

  // .WJudger.ExecuteResult executeResult = 3;
  if (this->_internal_has_executeresult()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::executeresult(this),
        _Internal::executeresult(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WJudger.JudgeReply)
  return target;
}

size_t JudgeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WJudger.JudgeReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .WJudger.CompileResult compileResult = 2;
  if (this->_internal_has_compileresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.compileresult_);
  }

  // .WJudger.ExecuteResult executeResult = 3;
  if (this->_internal_has_executeresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.executeresult_);
  }

  // .WJudger.JudgeReply.ResultType resultType = 1;
  if (this->_internal_resulttype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_resulttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JudgeReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JudgeReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JudgeReply::GetClassData() const { return &_class_data_; }


void JudgeReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JudgeReply*>(&to_msg);
  auto& from = static_cast<const JudgeReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WJudger.JudgeReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_compileresult()) {
    _this->_internal_mutable_compileresult()->::WJudger::CompileResult::MergeFrom(
        from._internal_compileresult());
  }
  if (from._internal_has_executeresult()) {
    _this->_internal_mutable_executeresult()->::WJudger::ExecuteResult::MergeFrom(
        from._internal_executeresult());
  }
  if (from._internal_resulttype() != 0) {
    _this->_internal_set_resulttype(from._internal_resulttype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JudgeReply::CopyFrom(const JudgeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WJudger.JudgeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JudgeReply::IsInitialized() const {
  return true;
}

void JudgeReply::InternalSwap(JudgeReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JudgeReply, _impl_.resulttype_)
      + sizeof(JudgeReply::_impl_.resulttype_)
      - PROTOBUF_FIELD_OFFSET(JudgeReply, _impl_.compileresult_)>(
          reinterpret_cast<char*>(&_impl_.compileresult_),
          reinterpret_cast<char*>(&other->_impl_.compileresult_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JudgeReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wjudger_2eproto_getter, &descriptor_table_wjudger_2eproto_once,
      file_level_metadata_wjudger_2eproto[3]);
}

// ===================================================================

class CompileResult::_Internal {
 public:
};

CompileResult::CompileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WJudger.CompileResult)
}
CompileResult::CompileResult(const CompileResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompileResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.testcases_){from._impl_.testcases_}
    , decltype(_impl_.compileeror_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.compileeror_ = from._impl_.compileeror_;
  // @@protoc_insertion_point(copy_constructor:WJudger.CompileResult)
}

inline void CompileResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.testcases_){arena}
    , decltype(_impl_.compileeror_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompileResult::~CompileResult() {
  // @@protoc_insertion_point(destructor:WJudger.CompileResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompileResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.testcases_.~RepeatedPtrField();
}

void CompileResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompileResult::Clear() {
// @@protoc_insertion_point(message_clear_start:WJudger.CompileResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.testcases_.Clear();
  _impl_.compileeror_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompileResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool compileEror = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.compileeror_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string testcases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_testcases();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "WJudger.CompileResult.testcases"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompileResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WJudger.CompileResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool compileEror = 1;
  if (this->_internal_compileeror() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_compileeror(), target);
  }

  // repeated string testcases = 2;
  for (int i = 0, n = this->_internal_testcases_size(); i < n; i++) {
    const auto& s = this->_internal_testcases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WJudger.CompileResult.testcases");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WJudger.CompileResult)
  return target;
}

size_t CompileResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WJudger.CompileResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string testcases = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.testcases_.size());
  for (int i = 0, n = _impl_.testcases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.testcases_.Get(i));
  }

  // bool compileEror = 1;
  if (this->_internal_compileeror() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompileResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompileResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompileResult::GetClassData() const { return &_class_data_; }


void CompileResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompileResult*>(&to_msg);
  auto& from = static_cast<const CompileResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WJudger.CompileResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.testcases_.MergeFrom(from._impl_.testcases_);
  if (from._internal_compileeror() != 0) {
    _this->_internal_set_compileeror(from._internal_compileeror());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompileResult::CopyFrom(const CompileResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WJudger.CompileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileResult::IsInitialized() const {
  return true;
}

void CompileResult::InternalSwap(CompileResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.testcases_.InternalSwap(&other->_impl_.testcases_);
  swap(_impl_.compileeror_, other->_impl_.compileeror_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wjudger_2eproto_getter, &descriptor_table_wjudger_2eproto_once,
      file_level_metadata_wjudger_2eproto[4]);
}

// ===================================================================

class ExecuteResult::_Internal {
 public:
};

ExecuteResult::ExecuteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:WJudger.ExecuteResult)
}
ExecuteResult::ExecuteResult(const ExecuteResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExecuteResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.testcase_){}
    , decltype(_impl_.verdict_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.timeused_){}
    , decltype(_impl_.memoryused_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.testcase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testcase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_testcase().empty()) {
    _this->_impl_.testcase_.Set(from._internal_testcase(), 
      _this->GetArenaForAllocation());
  }
  _impl_.verdict_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verdict_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verdict().empty()) {
    _this->_impl_.verdict_.Set(from._internal_verdict(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timeused_, &from._impl_.timeused_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.timeused_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:WJudger.ExecuteResult)
}

inline void ExecuteResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.testcase_){}
    , decltype(_impl_.verdict_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.timeused_){uint64_t{0u}}
    , decltype(_impl_.memoryused_){0}
    , decltype(_impl_.score_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.testcase_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.testcase_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verdict_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.verdict_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExecuteResult::~ExecuteResult() {
  // @@protoc_insertion_point(destructor:WJudger.ExecuteResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExecuteResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.testcase_.Destroy();
  _impl_.verdict_.Destroy();
  _impl_.msg_.Destroy();
}

void ExecuteResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExecuteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:WJudger.ExecuteResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.testcase_.ClearToEmpty();
  _impl_.verdict_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  ::memset(&_impl_.timeused_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.score_) -
      reinterpret_cast<char*>(&_impl_.timeused_)) + sizeof(_impl_.score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string testcase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_testcase();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WJudger.ExecuteResult.testcase"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timeused = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timeused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double memoryused = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.memoryused_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string verdict = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_verdict();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WJudger.ExecuteResult.verdict"));
        } else
          goto handle_unusual;
        continue;
      // string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "WJudger.ExecuteResult.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WJudger.ExecuteResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string testcase = 1;
  if (!this->_internal_testcase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testcase().data(), static_cast<int>(this->_internal_testcase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WJudger.ExecuteResult.testcase");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_testcase(), target);
  }

  // uint64 timeused = 2;
  if (this->_internal_timeused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timeused(), target);
  }

  // double memoryused = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memoryused = this->_internal_memoryused();
  uint64_t raw_memoryused;
  memcpy(&raw_memoryused, &tmp_memoryused, sizeof(tmp_memoryused));
  if (raw_memoryused != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_memoryused(), target);
  }

  // uint32 score = 4;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_score(), target);
  }

  // string verdict = 5;
  if (!this->_internal_verdict().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verdict().data(), static_cast<int>(this->_internal_verdict().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WJudger.ExecuteResult.verdict");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_verdict(), target);
  }

  // string msg = 6;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WJudger.ExecuteResult.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WJudger.ExecuteResult)
  return target;
}

size_t ExecuteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WJudger.ExecuteResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string testcase = 1;
  if (!this->_internal_testcase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testcase());
  }

  // string verdict = 5;
  if (!this->_internal_verdict().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verdict());
  }

  // string msg = 6;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint64 timeused = 2;
  if (this->_internal_timeused() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timeused());
  }

  // double memoryused = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memoryused = this->_internal_memoryused();
  uint64_t raw_memoryused;
  memcpy(&raw_memoryused, &tmp_memoryused, sizeof(tmp_memoryused));
  if (raw_memoryused != 0) {
    total_size += 1 + 8;
  }

  // uint32 score = 4;
  if (this->_internal_score() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExecuteResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteResult::GetClassData() const { return &_class_data_; }


void ExecuteResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExecuteResult*>(&to_msg);
  auto& from = static_cast<const ExecuteResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:WJudger.ExecuteResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_testcase().empty()) {
    _this->_internal_set_testcase(from._internal_testcase());
  }
  if (!from._internal_verdict().empty()) {
    _this->_internal_set_verdict(from._internal_verdict());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_timeused() != 0) {
    _this->_internal_set_timeused(from._internal_timeused());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memoryused = from._internal_memoryused();
  uint64_t raw_memoryused;
  memcpy(&raw_memoryused, &tmp_memoryused, sizeof(tmp_memoryused));
  if (raw_memoryused != 0) {
    _this->_internal_set_memoryused(from._internal_memoryused());
  }
  if (from._internal_score() != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteResult::CopyFrom(const ExecuteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WJudger.ExecuteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteResult::IsInitialized() const {
  return true;
}

void ExecuteResult::InternalSwap(ExecuteResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.testcase_, lhs_arena,
      &other->_impl_.testcase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.verdict_, lhs_arena,
      &other->_impl_.verdict_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteResult, _impl_.score_)
      + sizeof(ExecuteResult::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(ExecuteResult, _impl_.timeused_)>(
          reinterpret_cast<char*>(&_impl_.timeused_),
          reinterpret_cast<char*>(&other->_impl_.timeused_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wjudger_2eproto_getter, &descriptor_table_wjudger_2eproto_once,
      file_level_metadata_wjudger_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace WJudger
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::WJudger::SimpleArgs*
Arena::CreateMaybeMessage< ::WJudger::SimpleArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WJudger::SimpleArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::WJudger::SimpleReply*
Arena::CreateMaybeMessage< ::WJudger::SimpleReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WJudger::SimpleReply >(arena);
}
template<> PROTOBUF_NOINLINE ::WJudger::JudgeArgs*
Arena::CreateMaybeMessage< ::WJudger::JudgeArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WJudger::JudgeArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::WJudger::JudgeReply*
Arena::CreateMaybeMessage< ::WJudger::JudgeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WJudger::JudgeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::WJudger::CompileResult*
Arena::CreateMaybeMessage< ::WJudger::CompileResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WJudger::CompileResult >(arena);
}
template<> PROTOBUF_NOINLINE ::WJudger::ExecuteResult*
Arena::CreateMaybeMessage< ::WJudger::ExecuteResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::WJudger::ExecuteResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
