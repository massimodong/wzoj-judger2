// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wjudger.proto

#include "wjudger.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr JudgeArgs::JudgeArgs(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timelimit_(uint64_t{0u})
  , language_(0)

  , dataid_(0u)
  , memorylimit_(0){}
struct JudgeArgsDefaultTypeInternal {
  constexpr JudgeArgsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JudgeArgsDefaultTypeInternal() {}
  union {
    JudgeArgs _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JudgeArgsDefaultTypeInternal _JudgeArgs_default_instance_;
constexpr JudgeReply::JudgeReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compileresult_(nullptr)
  , executeresult_(nullptr)
  , resulttype_(0)
{}
struct JudgeReplyDefaultTypeInternal {
  constexpr JudgeReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JudgeReplyDefaultTypeInternal() {}
  union {
    JudgeReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JudgeReplyDefaultTypeInternal _JudgeReply_default_instance_;
constexpr CompileResult::CompileResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : testcases_()
  , compile_error_(false){}
struct CompileResultDefaultTypeInternal {
  constexpr CompileResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompileResultDefaultTypeInternal() {}
  union {
    CompileResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompileResultDefaultTypeInternal _CompileResult_default_instance_;
constexpr ExecuteResult::ExecuteResult(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : testcase_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , verdict_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timeused_(uint64_t{0u})
  , memoryused_(0)
  , score_(0u){}
struct ExecuteResultDefaultTypeInternal {
  constexpr ExecuteResultDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExecuteResultDefaultTypeInternal() {}
  union {
    ExecuteResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExecuteResultDefaultTypeInternal _ExecuteResult_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_wjudger_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_wjudger_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_wjudger_2eproto = nullptr;

const uint32_t TableStruct_wjudger_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JudgeArgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JudgeArgs, code_),
  PROTOBUF_FIELD_OFFSET(::JudgeArgs, language_),
  PROTOBUF_FIELD_OFFSET(::JudgeArgs, timelimit_),
  PROTOBUF_FIELD_OFFSET(::JudgeArgs, memorylimit_),
  PROTOBUF_FIELD_OFFSET(::JudgeArgs, dataid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JudgeReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::JudgeReply, resulttype_),
  PROTOBUF_FIELD_OFFSET(::JudgeReply, compileresult_),
  PROTOBUF_FIELD_OFFSET(::JudgeReply, executeresult_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CompileResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CompileResult, compile_error_),
  PROTOBUF_FIELD_OFFSET(::CompileResult, testcases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ExecuteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ExecuteResult, testcase_),
  PROTOBUF_FIELD_OFFSET(::ExecuteResult, timeused_),
  PROTOBUF_FIELD_OFFSET(::ExecuteResult, memoryused_),
  PROTOBUF_FIELD_OFFSET(::ExecuteResult, score_),
  PROTOBUF_FIELD_OFFSET(::ExecuteResult, verdict_),
  PROTOBUF_FIELD_OFFSET(::ExecuteResult, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::JudgeArgs)},
  { 11, -1, -1, sizeof(::JudgeReply)},
  { 20, -1, -1, sizeof(::CompileResult)},
  { 28, -1, -1, sizeof(::ExecuteResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JudgeArgs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JudgeReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CompileResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ExecuteResult_default_instance_),
};

const char descriptor_table_protodef_wjudger_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rwjudger.proto\"\266\001\n\tJudgeArgs\022\014\n\004code\030\001 "
  "\001(\t\022%\n\010language\030\002 \001(\0162\023.JudgeArgs.Langua"
  "ge\022\021\n\ttimelimit\030\003 \001(\004\022\023\n\013memorylimit\030\004 \001"
  "(\001\022\016\n\006dataId\030\005 \001(\r\"<\n\010Language\022\005\n\001C\020\000\022\007\n"
  "\003CPP\020\001\022\n\n\006PASCAL\020\002\022\010\n\004JAVA\020\003\022\n\n\006PYTHON\020\004"
  "\"\256\001\n\nJudgeReply\022*\n\nresultType\030\001 \001(\0162\026.Ju"
  "dgeReply.ResultType\022%\n\rcompileResult\030\002 \001"
  "(\0132\016.CompileResult\022%\n\rexecuteResult\030\003 \001("
  "\0132\016.ExecuteResult\"&\n\nResultType\022\013\n\007COMPI"
  "LE\020\000\022\013\n\007EXECUTE\020\001\"9\n\rCompileResult\022\025\n\rco"
  "mpile_error\030\001 \001(\010\022\021\n\ttestcases\030\002 \003(\t\"t\n\r"
  "ExecuteResult\022\020\n\010testcase\030\001 \001(\t\022\020\n\010timeu"
  "sed\030\002 \001(\004\022\022\n\nmemoryused\030\003 \001(\001\022\r\n\005score\030\004"
  " \001(\r\022\017\n\007verdict\030\005 \001(\t\022\013\n\003msg\030\006 \001(\t2/\n\007WJ"
  "udger\022$\n\005Judge\022\n.JudgeArgs\032\013.JudgeReply\""
  "\0000\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_wjudger_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wjudger_2eproto = {
  false, false, 611, descriptor_table_protodef_wjudger_2eproto, "wjudger.proto", 
  &descriptor_table_wjudger_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_wjudger_2eproto::offsets,
  file_level_metadata_wjudger_2eproto, file_level_enum_descriptors_wjudger_2eproto, file_level_service_descriptors_wjudger_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_wjudger_2eproto_getter() {
  return &descriptor_table_wjudger_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_wjudger_2eproto(&descriptor_table_wjudger_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JudgeArgs_Language_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_wjudger_2eproto);
  return file_level_enum_descriptors_wjudger_2eproto[0];
}
bool JudgeArgs_Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr JudgeArgs_Language JudgeArgs::C;
constexpr JudgeArgs_Language JudgeArgs::CPP;
constexpr JudgeArgs_Language JudgeArgs::PASCAL;
constexpr JudgeArgs_Language JudgeArgs::JAVA;
constexpr JudgeArgs_Language JudgeArgs::PYTHON;
constexpr JudgeArgs_Language JudgeArgs::Language_MIN;
constexpr JudgeArgs_Language JudgeArgs::Language_MAX;
constexpr int JudgeArgs::Language_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JudgeReply_ResultType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_wjudger_2eproto);
  return file_level_enum_descriptors_wjudger_2eproto[1];
}
bool JudgeReply_ResultType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr JudgeReply_ResultType JudgeReply::COMPILE;
constexpr JudgeReply_ResultType JudgeReply::EXECUTE;
constexpr JudgeReply_ResultType JudgeReply::ResultType_MIN;
constexpr JudgeReply_ResultType JudgeReply::ResultType_MAX;
constexpr int JudgeReply::ResultType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class JudgeArgs::_Internal {
 public:
};

JudgeArgs::JudgeArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:JudgeArgs)
}
JudgeArgs::JudgeArgs(const JudgeArgs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timelimit_, &from.timelimit_,
    static_cast<size_t>(reinterpret_cast<char*>(&memorylimit_) -
    reinterpret_cast<char*>(&timelimit_)) + sizeof(memorylimit_));
  // @@protoc_insertion_point(copy_constructor:JudgeArgs)
}

inline void JudgeArgs::SharedCtor() {
code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timelimit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memorylimit_) -
    reinterpret_cast<char*>(&timelimit_)) + sizeof(memorylimit_));
}

JudgeArgs::~JudgeArgs() {
  // @@protoc_insertion_point(destructor:JudgeArgs)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JudgeArgs::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JudgeArgs::ArenaDtor(void* object) {
  JudgeArgs* _this = reinterpret_cast< JudgeArgs* >(object);
  (void)_this;
}
void JudgeArgs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JudgeArgs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JudgeArgs::Clear() {
// @@protoc_insertion_point(message_clear_start:JudgeArgs)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty();
  ::memset(&timelimit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&memorylimit_) -
      reinterpret_cast<char*>(&timelimit_)) + sizeof(memorylimit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JudgeArgs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JudgeArgs.code"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .JudgeArgs.Language language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::JudgeArgs_Language>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 timelimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timelimit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double memorylimit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          memorylimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 dataId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          dataid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JudgeArgs::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JudgeArgs)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JudgeArgs.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // .JudgeArgs.Language language = 2;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_language(), target);
  }

  // uint64 timelimit = 3;
  if (this->_internal_timelimit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timelimit(), target);
  }

  // double memorylimit = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memorylimit = this->_internal_memorylimit();
  uint64_t raw_memorylimit;
  memcpy(&raw_memorylimit, &tmp_memorylimit, sizeof(tmp_memorylimit));
  if (raw_memorylimit != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_memorylimit(), target);
  }

  // uint32 dataId = 5;
  if (this->_internal_dataid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_dataid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JudgeArgs)
  return target;
}

size_t JudgeArgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JudgeArgs)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // uint64 timelimit = 3;
  if (this->_internal_timelimit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timelimit());
  }

  // .JudgeArgs.Language language = 2;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_language());
  }

  // uint32 dataId = 5;
  if (this->_internal_dataid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dataid());
  }

  // double memorylimit = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memorylimit = this->_internal_memorylimit();
  uint64_t raw_memorylimit;
  memcpy(&raw_memorylimit, &tmp_memorylimit, sizeof(tmp_memorylimit));
  if (raw_memorylimit != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JudgeArgs::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JudgeArgs::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JudgeArgs::GetClassData() const { return &_class_data_; }

void JudgeArgs::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JudgeArgs *>(to)->MergeFrom(
      static_cast<const JudgeArgs &>(from));
}


void JudgeArgs::MergeFrom(const JudgeArgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JudgeArgs)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _internal_set_code(from._internal_code());
  }
  if (from._internal_timelimit() != 0) {
    _internal_set_timelimit(from._internal_timelimit());
  }
  if (from._internal_language() != 0) {
    _internal_set_language(from._internal_language());
  }
  if (from._internal_dataid() != 0) {
    _internal_set_dataid(from._internal_dataid());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memorylimit = from._internal_memorylimit();
  uint64_t raw_memorylimit;
  memcpy(&raw_memorylimit, &tmp_memorylimit, sizeof(tmp_memorylimit));
  if (raw_memorylimit != 0) {
    _internal_set_memorylimit(from._internal_memorylimit());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JudgeArgs::CopyFrom(const JudgeArgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JudgeArgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JudgeArgs::IsInitialized() const {
  return true;
}

void JudgeArgs::InternalSwap(JudgeArgs* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &code_, lhs_arena,
      &other->code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JudgeArgs, memorylimit_)
      + sizeof(JudgeArgs::memorylimit_)
      - PROTOBUF_FIELD_OFFSET(JudgeArgs, timelimit_)>(
          reinterpret_cast<char*>(&timelimit_),
          reinterpret_cast<char*>(&other->timelimit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JudgeArgs::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_wjudger_2eproto_getter, &descriptor_table_wjudger_2eproto_once,
      file_level_metadata_wjudger_2eproto[0]);
}

// ===================================================================

class JudgeReply::_Internal {
 public:
  static const ::CompileResult& compileresult(const JudgeReply* msg);
  static const ::ExecuteResult& executeresult(const JudgeReply* msg);
};

const ::CompileResult&
JudgeReply::_Internal::compileresult(const JudgeReply* msg) {
  return *msg->compileresult_;
}
const ::ExecuteResult&
JudgeReply::_Internal::executeresult(const JudgeReply* msg) {
  return *msg->executeresult_;
}
JudgeReply::JudgeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:JudgeReply)
}
JudgeReply::JudgeReply(const JudgeReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_compileresult()) {
    compileresult_ = new ::CompileResult(*from.compileresult_);
  } else {
    compileresult_ = nullptr;
  }
  if (from._internal_has_executeresult()) {
    executeresult_ = new ::ExecuteResult(*from.executeresult_);
  } else {
    executeresult_ = nullptr;
  }
  resulttype_ = from.resulttype_;
  // @@protoc_insertion_point(copy_constructor:JudgeReply)
}

inline void JudgeReply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&compileresult_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resulttype_) -
    reinterpret_cast<char*>(&compileresult_)) + sizeof(resulttype_));
}

JudgeReply::~JudgeReply() {
  // @@protoc_insertion_point(destructor:JudgeReply)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JudgeReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete compileresult_;
  if (this != internal_default_instance()) delete executeresult_;
}

void JudgeReply::ArenaDtor(void* object) {
  JudgeReply* _this = reinterpret_cast< JudgeReply* >(object);
  (void)_this;
}
void JudgeReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JudgeReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JudgeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:JudgeReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && compileresult_ != nullptr) {
    delete compileresult_;
  }
  compileresult_ = nullptr;
  if (GetArenaForAllocation() == nullptr && executeresult_ != nullptr) {
    delete executeresult_;
  }
  executeresult_ = nullptr;
  resulttype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JudgeReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .JudgeReply.ResultType resultType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_resulttype(static_cast<::JudgeReply_ResultType>(val));
        } else
          goto handle_unusual;
        continue;
      // .CompileResult compileResult = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_compileresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ExecuteResult executeResult = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_executeresult(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JudgeReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JudgeReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .JudgeReply.ResultType resultType = 1;
  if (this->_internal_resulttype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_resulttype(), target);
  }

  // .CompileResult compileResult = 2;
  if (this->_internal_has_compileresult()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::compileresult(this), target, stream);
  }

  // .ExecuteResult executeResult = 3;
  if (this->_internal_has_executeresult()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::executeresult(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JudgeReply)
  return target;
}

size_t JudgeReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JudgeReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CompileResult compileResult = 2;
  if (this->_internal_has_compileresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *compileresult_);
  }

  // .ExecuteResult executeResult = 3;
  if (this->_internal_has_executeresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *executeresult_);
  }

  // .JudgeReply.ResultType resultType = 1;
  if (this->_internal_resulttype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resulttype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JudgeReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JudgeReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JudgeReply::GetClassData() const { return &_class_data_; }

void JudgeReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JudgeReply *>(to)->MergeFrom(
      static_cast<const JudgeReply &>(from));
}


void JudgeReply::MergeFrom(const JudgeReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JudgeReply)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_compileresult()) {
    _internal_mutable_compileresult()->::CompileResult::MergeFrom(from._internal_compileresult());
  }
  if (from._internal_has_executeresult()) {
    _internal_mutable_executeresult()->::ExecuteResult::MergeFrom(from._internal_executeresult());
  }
  if (from._internal_resulttype() != 0) {
    _internal_set_resulttype(from._internal_resulttype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JudgeReply::CopyFrom(const JudgeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JudgeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JudgeReply::IsInitialized() const {
  return true;
}

void JudgeReply::InternalSwap(JudgeReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JudgeReply, resulttype_)
      + sizeof(JudgeReply::resulttype_)
      - PROTOBUF_FIELD_OFFSET(JudgeReply, compileresult_)>(
          reinterpret_cast<char*>(&compileresult_),
          reinterpret_cast<char*>(&other->compileresult_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JudgeReply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_wjudger_2eproto_getter, &descriptor_table_wjudger_2eproto_once,
      file_level_metadata_wjudger_2eproto[1]);
}

// ===================================================================

class CompileResult::_Internal {
 public:
};

CompileResult::CompileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  testcases_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CompileResult)
}
CompileResult::CompileResult(const CompileResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      testcases_(from.testcases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  compile_error_ = from.compile_error_;
  // @@protoc_insertion_point(copy_constructor:CompileResult)
}

inline void CompileResult::SharedCtor() {
compile_error_ = false;
}

CompileResult::~CompileResult() {
  // @@protoc_insertion_point(destructor:CompileResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CompileResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CompileResult::ArenaDtor(void* object) {
  CompileResult* _this = reinterpret_cast< CompileResult* >(object);
  (void)_this;
}
void CompileResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompileResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CompileResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CompileResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testcases_.Clear();
  compile_error_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompileResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool compile_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          compile_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string testcases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_testcases();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CompileResult.testcases"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompileResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CompileResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool compile_error = 1;
  if (this->_internal_compile_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_compile_error(), target);
  }

  // repeated string testcases = 2;
  for (int i = 0, n = this->_internal_testcases_size(); i < n; i++) {
    const auto& s = this->_internal_testcases(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "CompileResult.testcases");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CompileResult)
  return target;
}

size_t CompileResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CompileResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string testcases = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(testcases_.size());
  for (int i = 0, n = testcases_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      testcases_.Get(i));
  }

  // bool compile_error = 1;
  if (this->_internal_compile_error() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompileResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CompileResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompileResult::GetClassData() const { return &_class_data_; }

void CompileResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CompileResult *>(to)->MergeFrom(
      static_cast<const CompileResult &>(from));
}


void CompileResult::MergeFrom(const CompileResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CompileResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  testcases_.MergeFrom(from.testcases_);
  if (from._internal_compile_error() != 0) {
    _internal_set_compile_error(from._internal_compile_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompileResult::CopyFrom(const CompileResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CompileResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileResult::IsInitialized() const {
  return true;
}

void CompileResult::InternalSwap(CompileResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  testcases_.InternalSwap(&other->testcases_);
  swap(compile_error_, other->compile_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_wjudger_2eproto_getter, &descriptor_table_wjudger_2eproto_once,
      file_level_metadata_wjudger_2eproto[2]);
}

// ===================================================================

class ExecuteResult::_Internal {
 public:
};

ExecuteResult::ExecuteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ExecuteResult)
}
ExecuteResult::ExecuteResult(const ExecuteResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  testcase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    testcase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_testcase().empty()) {
    testcase_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_testcase(), 
      GetArenaForAllocation());
  }
  verdict_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    verdict_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_verdict().empty()) {
    verdict_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_verdict(), 
      GetArenaForAllocation());
  }
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timeused_, &from.timeused_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&timeused_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:ExecuteResult)
}

inline void ExecuteResult::SharedCtor() {
testcase_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  testcase_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
verdict_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  verdict_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timeused_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&timeused_)) + sizeof(score_));
}

ExecuteResult::~ExecuteResult() {
  // @@protoc_insertion_point(destructor:ExecuteResult)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ExecuteResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  testcase_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verdict_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExecuteResult::ArenaDtor(void* object) {
  ExecuteResult* _this = reinterpret_cast< ExecuteResult* >(object);
  (void)_this;
}
void ExecuteResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExecuteResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExecuteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ExecuteResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  testcase_.ClearToEmpty();
  verdict_.ClearToEmpty();
  msg_.ClearToEmpty();
  ::memset(&timeused_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&timeused_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExecuteResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string testcase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_testcase();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ExecuteResult.testcase"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timeused = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timeused_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double memoryused = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          memoryused_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 score = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string verdict = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_verdict();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ExecuteResult.verdict"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ExecuteResult.msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExecuteResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ExecuteResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string testcase = 1;
  if (!this->_internal_testcase().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_testcase().data(), static_cast<int>(this->_internal_testcase().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExecuteResult.testcase");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_testcase(), target);
  }

  // uint64 timeused = 2;
  if (this->_internal_timeused() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timeused(), target);
  }

  // double memoryused = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memoryused = this->_internal_memoryused();
  uint64_t raw_memoryused;
  memcpy(&raw_memoryused, &tmp_memoryused, sizeof(tmp_memoryused));
  if (raw_memoryused != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_memoryused(), target);
  }

  // uint32 score = 4;
  if (this->_internal_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_score(), target);
  }

  // string verdict = 5;
  if (!this->_internal_verdict().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_verdict().data(), static_cast<int>(this->_internal_verdict().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExecuteResult.verdict");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_verdict(), target);
  }

  // string msg = 6;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ExecuteResult.msg");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ExecuteResult)
  return target;
}

size_t ExecuteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ExecuteResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string testcase = 1;
  if (!this->_internal_testcase().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_testcase());
  }

  // string verdict = 5;
  if (!this->_internal_verdict().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_verdict());
  }

  // string msg = 6;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint64 timeused = 2;
  if (this->_internal_timeused() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_timeused());
  }

  // double memoryused = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memoryused = this->_internal_memoryused();
  uint64_t raw_memoryused;
  memcpy(&raw_memoryused, &tmp_memoryused, sizeof(tmp_memoryused));
  if (raw_memoryused != 0) {
    total_size += 1 + 8;
  }

  // uint32 score = 4;
  if (this->_internal_score() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_score());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExecuteResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ExecuteResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExecuteResult::GetClassData() const { return &_class_data_; }

void ExecuteResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ExecuteResult *>(to)->MergeFrom(
      static_cast<const ExecuteResult &>(from));
}


void ExecuteResult::MergeFrom(const ExecuteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ExecuteResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_testcase().empty()) {
    _internal_set_testcase(from._internal_testcase());
  }
  if (!from._internal_verdict().empty()) {
    _internal_set_verdict(from._internal_verdict());
  }
  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (from._internal_timeused() != 0) {
    _internal_set_timeused(from._internal_timeused());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_memoryused = from._internal_memoryused();
  uint64_t raw_memoryused;
  memcpy(&raw_memoryused, &tmp_memoryused, sizeof(tmp_memoryused));
  if (raw_memoryused != 0) {
    _internal_set_memoryused(from._internal_memoryused());
  }
  if (from._internal_score() != 0) {
    _internal_set_score(from._internal_score());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExecuteResult::CopyFrom(const ExecuteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ExecuteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteResult::IsInitialized() const {
  return true;
}

void ExecuteResult::InternalSwap(ExecuteResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &testcase_, lhs_arena,
      &other->testcase_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &verdict_, lhs_arena,
      &other->verdict_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExecuteResult, score_)
      + sizeof(ExecuteResult::score_)
      - PROTOBUF_FIELD_OFFSET(ExecuteResult, timeused_)>(
          reinterpret_cast<char*>(&timeused_),
          reinterpret_cast<char*>(&other->timeused_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExecuteResult::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_wjudger_2eproto_getter, &descriptor_table_wjudger_2eproto_once,
      file_level_metadata_wjudger_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::JudgeArgs* Arena::CreateMaybeMessage< ::JudgeArgs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JudgeArgs >(arena);
}
template<> PROTOBUF_NOINLINE ::JudgeReply* Arena::CreateMaybeMessage< ::JudgeReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::JudgeReply >(arena);
}
template<> PROTOBUF_NOINLINE ::CompileResult* Arena::CreateMaybeMessage< ::CompileResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CompileResult >(arena);
}
template<> PROTOBUF_NOINLINE ::ExecuteResult* Arena::CreateMaybeMessage< ::ExecuteResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ExecuteResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
