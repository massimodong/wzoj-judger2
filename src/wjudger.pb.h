// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wjudger.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wjudger_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wjudger_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wjudger_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wjudger_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wjudger_2eproto;
namespace WJudger {
class CompileResult;
struct CompileResultDefaultTypeInternal;
extern CompileResultDefaultTypeInternal _CompileResult_default_instance_;
class ExecuteResult;
struct ExecuteResultDefaultTypeInternal;
extern ExecuteResultDefaultTypeInternal _ExecuteResult_default_instance_;
class JudgeArgs;
struct JudgeArgsDefaultTypeInternal;
extern JudgeArgsDefaultTypeInternal _JudgeArgs_default_instance_;
class JudgeReply;
struct JudgeReplyDefaultTypeInternal;
extern JudgeReplyDefaultTypeInternal _JudgeReply_default_instance_;
class SimpleArgs;
struct SimpleArgsDefaultTypeInternal;
extern SimpleArgsDefaultTypeInternal _SimpleArgs_default_instance_;
class SimpleReply;
struct SimpleReplyDefaultTypeInternal;
extern SimpleReplyDefaultTypeInternal _SimpleReply_default_instance_;
}  // namespace WJudger
PROTOBUF_NAMESPACE_OPEN
template<> ::WJudger::CompileResult* Arena::CreateMaybeMessage<::WJudger::CompileResult>(Arena*);
template<> ::WJudger::ExecuteResult* Arena::CreateMaybeMessage<::WJudger::ExecuteResult>(Arena*);
template<> ::WJudger::JudgeArgs* Arena::CreateMaybeMessage<::WJudger::JudgeArgs>(Arena*);
template<> ::WJudger::JudgeReply* Arena::CreateMaybeMessage<::WJudger::JudgeReply>(Arena*);
template<> ::WJudger::SimpleArgs* Arena::CreateMaybeMessage<::WJudger::SimpleArgs>(Arena*);
template<> ::WJudger::SimpleReply* Arena::CreateMaybeMessage<::WJudger::SimpleReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace WJudger {

enum JudgeReply_ResultType : int {
  JudgeReply_ResultType_COMPILE = 0,
  JudgeReply_ResultType_EXECUTE = 1,
  JudgeReply_ResultType_JudgeReply_ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  JudgeReply_ResultType_JudgeReply_ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool JudgeReply_ResultType_IsValid(int value);
constexpr JudgeReply_ResultType JudgeReply_ResultType_ResultType_MIN = JudgeReply_ResultType_COMPILE;
constexpr JudgeReply_ResultType JudgeReply_ResultType_ResultType_MAX = JudgeReply_ResultType_EXECUTE;
constexpr int JudgeReply_ResultType_ResultType_ARRAYSIZE = JudgeReply_ResultType_ResultType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JudgeReply_ResultType_descriptor();
template<typename T>
inline const std::string& JudgeReply_ResultType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JudgeReply_ResultType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JudgeReply_ResultType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JudgeReply_ResultType_descriptor(), enum_t_value);
}
inline bool JudgeReply_ResultType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JudgeReply_ResultType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JudgeReply_ResultType>(
    JudgeReply_ResultType_descriptor(), name, value);
}
enum JudgeStatus : int {
  OK = 0,
  UNAUTHENTICATED = 1,
  BUSY = 2,
  JudgeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  JudgeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool JudgeStatus_IsValid(int value);
constexpr JudgeStatus JudgeStatus_MIN = OK;
constexpr JudgeStatus JudgeStatus_MAX = BUSY;
constexpr int JudgeStatus_ARRAYSIZE = JudgeStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JudgeStatus_descriptor();
template<typename T>
inline const std::string& JudgeStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JudgeStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JudgeStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JudgeStatus_descriptor(), enum_t_value);
}
inline bool JudgeStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JudgeStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JudgeStatus>(
    JudgeStatus_descriptor(), name, value);
}
enum Language : int {
  C = 0,
  CPP = 1,
  PASCAL = 2,
  JAVA = 3,
  PYTHON = 4,
  Language_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Language_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Language_IsValid(int value);
constexpr Language Language_MIN = C;
constexpr Language Language_MAX = PYTHON;
constexpr int Language_ARRAYSIZE = Language_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Language_descriptor();
template<typename T>
inline const std::string& Language_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Language>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Language_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Language_descriptor(), enum_t_value);
}
inline bool Language_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Language* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Language>(
    Language_descriptor(), name, value);
}
// ===================================================================

class SimpleArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WJudger.SimpleArgs) */ {
 public:
  inline SimpleArgs() : SimpleArgs(nullptr) {}
  ~SimpleArgs() override;
  explicit PROTOBUF_CONSTEXPR SimpleArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleArgs(const SimpleArgs& from);
  SimpleArgs(SimpleArgs&& from) noexcept
    : SimpleArgs() {
    *this = ::std::move(from);
  }

  inline SimpleArgs& operator=(const SimpleArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleArgs& operator=(SimpleArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleArgs* internal_default_instance() {
    return reinterpret_cast<const SimpleArgs*>(
               &_SimpleArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SimpleArgs& a, SimpleArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleArgs& from) {
    SimpleArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WJudger.SimpleArgs";
  }
  protected:
  explicit SimpleArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kCodeFieldNumber = 3,
    kInputFieldNumber = 5,
    kJudgeridFieldNumber = 1,
    kLanguageFieldNumber = 4,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string code = 3;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string input = 5;
  void clear_input();
  const std::string& input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input();
  PROTOBUF_NODISCARD std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // uint32 judgerid = 1;
  void clear_judgerid();
  uint32_t judgerid() const;
  void set_judgerid(uint32_t value);
  private:
  uint32_t _internal_judgerid() const;
  void _internal_set_judgerid(uint32_t value);
  public:

  // .WJudger.Language language = 4;
  void clear_language();
  ::WJudger::Language language() const;
  void set_language(::WJudger::Language value);
  private:
  ::WJudger::Language _internal_language() const;
  void _internal_set_language(::WJudger::Language value);
  public:

  // @@protoc_insertion_point(class_scope:WJudger.SimpleArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
    uint32_t judgerid_;
    int language_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wjudger_2eproto;
};
// -------------------------------------------------------------------

class SimpleReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WJudger.SimpleReply) */ {
 public:
  inline SimpleReply() : SimpleReply(nullptr) {}
  ~SimpleReply() override;
  explicit PROTOBUF_CONSTEXPR SimpleReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleReply(const SimpleReply& from);
  SimpleReply(SimpleReply&& from) noexcept
    : SimpleReply() {
    *this = ::std::move(from);
  }

  inline SimpleReply& operator=(const SimpleReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleReply& operator=(SimpleReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleReply* internal_default_instance() {
    return reinterpret_cast<const SimpleReply*>(
               &_SimpleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SimpleReply& a, SimpleReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SimpleReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SimpleReply& from) {
    SimpleReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WJudger.SimpleReply";
  }
  protected:
  explicit SimpleReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompileErrorMessageFieldNumber = 4,
    kRuntimeErrorMessageFieldNumber = 5,
    kOutputFieldNumber = 8,
    kStatusFieldNumber = 1,
    kCompileErrorFieldNumber = 2,
    kTimeusedFieldNumber = 6,
    kMemoryusedFieldNumber = 7,
    kRuntimeErrorFieldNumber = 3,
  };
  // string compileErrorMessage = 4;
  void clear_compileerrormessage();
  const std::string& compileerrormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_compileerrormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_compileerrormessage();
  PROTOBUF_NODISCARD std::string* release_compileerrormessage();
  void set_allocated_compileerrormessage(std::string* compileerrormessage);
  private:
  const std::string& _internal_compileerrormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_compileerrormessage(const std::string& value);
  std::string* _internal_mutable_compileerrormessage();
  public:

  // string runtimeErrorMessage = 5;
  void clear_runtimeerrormessage();
  const std::string& runtimeerrormessage() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtimeerrormessage(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtimeerrormessage();
  PROTOBUF_NODISCARD std::string* release_runtimeerrormessage();
  void set_allocated_runtimeerrormessage(std::string* runtimeerrormessage);
  private:
  const std::string& _internal_runtimeerrormessage() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtimeerrormessage(const std::string& value);
  std::string* _internal_mutable_runtimeerrormessage();
  public:

  // string output = 8;
  void clear_output();
  const std::string& output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output();
  PROTOBUF_NODISCARD std::string* release_output();
  void set_allocated_output(std::string* output);
  private:
  const std::string& _internal_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output(const std::string& value);
  std::string* _internal_mutable_output();
  public:

  // .WJudger.JudgeStatus status = 1;
  void clear_status();
  ::WJudger::JudgeStatus status() const;
  void set_status(::WJudger::JudgeStatus value);
  private:
  ::WJudger::JudgeStatus _internal_status() const;
  void _internal_set_status(::WJudger::JudgeStatus value);
  public:

  // bool compileError = 2;
  void clear_compileerror();
  bool compileerror() const;
  void set_compileerror(bool value);
  private:
  bool _internal_compileerror() const;
  void _internal_set_compileerror(bool value);
  public:

  // uint64 timeused = 6;
  void clear_timeused();
  uint64_t timeused() const;
  void set_timeused(uint64_t value);
  private:
  uint64_t _internal_timeused() const;
  void _internal_set_timeused(uint64_t value);
  public:

  // uint64 memoryused = 7;
  void clear_memoryused();
  uint64_t memoryused() const;
  void set_memoryused(uint64_t value);
  private:
  uint64_t _internal_memoryused() const;
  void _internal_set_memoryused(uint64_t value);
  public:

  // uint32 runtimeError = 3;
  void clear_runtimeerror();
  uint32_t runtimeerror() const;
  void set_runtimeerror(uint32_t value);
  private:
  uint32_t _internal_runtimeerror() const;
  void _internal_set_runtimeerror(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:WJudger.SimpleReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr compileerrormessage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtimeerrormessage_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
    int status_;
    bool compileerror_;
    uint64_t timeused_;
    uint64_t memoryused_;
    uint32_t runtimeerror_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wjudger_2eproto;
};
// -------------------------------------------------------------------

class JudgeArgs final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WJudger.JudgeArgs) */ {
 public:
  inline JudgeArgs() : JudgeArgs(nullptr) {}
  ~JudgeArgs() override;
  explicit PROTOBUF_CONSTEXPR JudgeArgs(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JudgeArgs(const JudgeArgs& from);
  JudgeArgs(JudgeArgs&& from) noexcept
    : JudgeArgs() {
    *this = ::std::move(from);
  }

  inline JudgeArgs& operator=(const JudgeArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline JudgeArgs& operator=(JudgeArgs&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JudgeArgs& default_instance() {
    return *internal_default_instance();
  }
  static inline const JudgeArgs* internal_default_instance() {
    return reinterpret_cast<const JudgeArgs*>(
               &_JudgeArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JudgeArgs& a, JudgeArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(JudgeArgs* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JudgeArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JudgeArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JudgeArgs>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JudgeArgs& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JudgeArgs& from) {
    JudgeArgs::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JudgeArgs* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WJudger.JudgeArgs";
  }
  protected:
  explicit JudgeArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kTimelimitFieldNumber = 3,
    kLanguageFieldNumber = 2,
    kDataIdFieldNumber = 5,
    kMemorylimitFieldNumber = 4,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // uint64 timelimit = 3;
  void clear_timelimit();
  uint64_t timelimit() const;
  void set_timelimit(uint64_t value);
  private:
  uint64_t _internal_timelimit() const;
  void _internal_set_timelimit(uint64_t value);
  public:

  // .WJudger.Language language = 2;
  void clear_language();
  ::WJudger::Language language() const;
  void set_language(::WJudger::Language value);
  private:
  ::WJudger::Language _internal_language() const;
  void _internal_set_language(::WJudger::Language value);
  public:

  // uint32 dataId = 5;
  void clear_dataid();
  uint32_t dataid() const;
  void set_dataid(uint32_t value);
  private:
  uint32_t _internal_dataid() const;
  void _internal_set_dataid(uint32_t value);
  public:

  // double memorylimit = 4;
  void clear_memorylimit();
  double memorylimit() const;
  void set_memorylimit(double value);
  private:
  double _internal_memorylimit() const;
  void _internal_set_memorylimit(double value);
  public:

  // @@protoc_insertion_point(class_scope:WJudger.JudgeArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    uint64_t timelimit_;
    int language_;
    uint32_t dataid_;
    double memorylimit_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wjudger_2eproto;
};
// -------------------------------------------------------------------

class JudgeReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WJudger.JudgeReply) */ {
 public:
  inline JudgeReply() : JudgeReply(nullptr) {}
  ~JudgeReply() override;
  explicit PROTOBUF_CONSTEXPR JudgeReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JudgeReply(const JudgeReply& from);
  JudgeReply(JudgeReply&& from) noexcept
    : JudgeReply() {
    *this = ::std::move(from);
  }

  inline JudgeReply& operator=(const JudgeReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline JudgeReply& operator=(JudgeReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JudgeReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const JudgeReply* internal_default_instance() {
    return reinterpret_cast<const JudgeReply*>(
               &_JudgeReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JudgeReply& a, JudgeReply& b) {
    a.Swap(&b);
  }
  inline void Swap(JudgeReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JudgeReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JudgeReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JudgeReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JudgeReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JudgeReply& from) {
    JudgeReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JudgeReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WJudger.JudgeReply";
  }
  protected:
  explicit JudgeReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef JudgeReply_ResultType ResultType;
  static constexpr ResultType COMPILE =
    JudgeReply_ResultType_COMPILE;
  static constexpr ResultType EXECUTE =
    JudgeReply_ResultType_EXECUTE;
  static inline bool ResultType_IsValid(int value) {
    return JudgeReply_ResultType_IsValid(value);
  }
  static constexpr ResultType ResultType_MIN =
    JudgeReply_ResultType_ResultType_MIN;
  static constexpr ResultType ResultType_MAX =
    JudgeReply_ResultType_ResultType_MAX;
  static constexpr int ResultType_ARRAYSIZE =
    JudgeReply_ResultType_ResultType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ResultType_descriptor() {
    return JudgeReply_ResultType_descriptor();
  }
  template<typename T>
  static inline const std::string& ResultType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResultType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResultType_Name.");
    return JudgeReply_ResultType_Name(enum_t_value);
  }
  static inline bool ResultType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResultType* value) {
    return JudgeReply_ResultType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCompileResultFieldNumber = 2,
    kExecuteResultFieldNumber = 3,
    kResultTypeFieldNumber = 1,
  };
  // .WJudger.CompileResult compileResult = 2;
  bool has_compileresult() const;
  private:
  bool _internal_has_compileresult() const;
  public:
  void clear_compileresult();
  const ::WJudger::CompileResult& compileresult() const;
  PROTOBUF_NODISCARD ::WJudger::CompileResult* release_compileresult();
  ::WJudger::CompileResult* mutable_compileresult();
  void set_allocated_compileresult(::WJudger::CompileResult* compileresult);
  private:
  const ::WJudger::CompileResult& _internal_compileresult() const;
  ::WJudger::CompileResult* _internal_mutable_compileresult();
  public:
  void unsafe_arena_set_allocated_compileresult(
      ::WJudger::CompileResult* compileresult);
  ::WJudger::CompileResult* unsafe_arena_release_compileresult();

  // .WJudger.ExecuteResult executeResult = 3;
  bool has_executeresult() const;
  private:
  bool _internal_has_executeresult() const;
  public:
  void clear_executeresult();
  const ::WJudger::ExecuteResult& executeresult() const;
  PROTOBUF_NODISCARD ::WJudger::ExecuteResult* release_executeresult();
  ::WJudger::ExecuteResult* mutable_executeresult();
  void set_allocated_executeresult(::WJudger::ExecuteResult* executeresult);
  private:
  const ::WJudger::ExecuteResult& _internal_executeresult() const;
  ::WJudger::ExecuteResult* _internal_mutable_executeresult();
  public:
  void unsafe_arena_set_allocated_executeresult(
      ::WJudger::ExecuteResult* executeresult);
  ::WJudger::ExecuteResult* unsafe_arena_release_executeresult();

  // .WJudger.JudgeReply.ResultType resultType = 1;
  void clear_resulttype();
  ::WJudger::JudgeReply_ResultType resulttype() const;
  void set_resulttype(::WJudger::JudgeReply_ResultType value);
  private:
  ::WJudger::JudgeReply_ResultType _internal_resulttype() const;
  void _internal_set_resulttype(::WJudger::JudgeReply_ResultType value);
  public:

  // @@protoc_insertion_point(class_scope:WJudger.JudgeReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::WJudger::CompileResult* compileresult_;
    ::WJudger::ExecuteResult* executeresult_;
    int resulttype_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wjudger_2eproto;
};
// -------------------------------------------------------------------

class CompileResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WJudger.CompileResult) */ {
 public:
  inline CompileResult() : CompileResult(nullptr) {}
  ~CompileResult() override;
  explicit PROTOBUF_CONSTEXPR CompileResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompileResult(const CompileResult& from);
  CompileResult(CompileResult&& from) noexcept
    : CompileResult() {
    *this = ::std::move(from);
  }

  inline CompileResult& operator=(const CompileResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileResult& operator=(CompileResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompileResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompileResult* internal_default_instance() {
    return reinterpret_cast<const CompileResult*>(
               &_CompileResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CompileResult& a, CompileResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompileResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompileResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompileResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompileResult& from) {
    CompileResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WJudger.CompileResult";
  }
  protected:
  explicit CompileResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestcasesFieldNumber = 2,
    kCompileErorFieldNumber = 1,
  };
  // repeated string testcases = 2;
  int testcases_size() const;
  private:
  int _internal_testcases_size() const;
  public:
  void clear_testcases();
  const std::string& testcases(int index) const;
  std::string* mutable_testcases(int index);
  void set_testcases(int index, const std::string& value);
  void set_testcases(int index, std::string&& value);
  void set_testcases(int index, const char* value);
  void set_testcases(int index, const char* value, size_t size);
  std::string* add_testcases();
  void add_testcases(const std::string& value);
  void add_testcases(std::string&& value);
  void add_testcases(const char* value);
  void add_testcases(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& testcases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_testcases();
  private:
  const std::string& _internal_testcases(int index) const;
  std::string* _internal_add_testcases();
  public:

  // bool compileEror = 1;
  void clear_compileeror();
  bool compileeror() const;
  void set_compileeror(bool value);
  private:
  bool _internal_compileeror() const;
  void _internal_set_compileeror(bool value);
  public:

  // @@protoc_insertion_point(class_scope:WJudger.CompileResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> testcases_;
    bool compileeror_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wjudger_2eproto;
};
// -------------------------------------------------------------------

class ExecuteResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WJudger.ExecuteResult) */ {
 public:
  inline ExecuteResult() : ExecuteResult(nullptr) {}
  ~ExecuteResult() override;
  explicit PROTOBUF_CONSTEXPR ExecuteResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExecuteResult(const ExecuteResult& from);
  ExecuteResult(ExecuteResult&& from) noexcept
    : ExecuteResult() {
    *this = ::std::move(from);
  }

  inline ExecuteResult& operator=(const ExecuteResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteResult& operator=(ExecuteResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExecuteResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExecuteResult* internal_default_instance() {
    return reinterpret_cast<const ExecuteResult*>(
               &_ExecuteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ExecuteResult& a, ExecuteResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExecuteResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExecuteResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExecuteResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExecuteResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExecuteResult& from) {
    ExecuteResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WJudger.ExecuteResult";
  }
  protected:
  explicit ExecuteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestcaseFieldNumber = 1,
    kVerdictFieldNumber = 5,
    kMsgFieldNumber = 6,
    kTimeusedFieldNumber = 2,
    kMemoryusedFieldNumber = 3,
    kScoreFieldNumber = 4,
  };
  // string testcase = 1;
  void clear_testcase();
  const std::string& testcase() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_testcase(ArgT0&& arg0, ArgT... args);
  std::string* mutable_testcase();
  PROTOBUF_NODISCARD std::string* release_testcase();
  void set_allocated_testcase(std::string* testcase);
  private:
  const std::string& _internal_testcase() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_testcase(const std::string& value);
  std::string* _internal_mutable_testcase();
  public:

  // string verdict = 5;
  void clear_verdict();
  const std::string& verdict() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_verdict(ArgT0&& arg0, ArgT... args);
  std::string* mutable_verdict();
  PROTOBUF_NODISCARD std::string* release_verdict();
  void set_allocated_verdict(std::string* verdict);
  private:
  const std::string& _internal_verdict() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verdict(const std::string& value);
  std::string* _internal_mutable_verdict();
  public:

  // string msg = 6;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 timeused = 2;
  void clear_timeused();
  uint64_t timeused() const;
  void set_timeused(uint64_t value);
  private:
  uint64_t _internal_timeused() const;
  void _internal_set_timeused(uint64_t value);
  public:

  // double memoryused = 3;
  void clear_memoryused();
  double memoryused() const;
  void set_memoryused(double value);
  private:
  double _internal_memoryused() const;
  void _internal_set_memoryused(double value);
  public:

  // uint32 score = 4;
  void clear_score();
  uint32_t score() const;
  void set_score(uint32_t value);
  private:
  uint32_t _internal_score() const;
  void _internal_set_score(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:WJudger.ExecuteResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr testcase_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verdict_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    uint64_t timeused_;
    double memoryused_;
    uint32_t score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wjudger_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SimpleArgs

// uint32 judgerid = 1;
inline void SimpleArgs::clear_judgerid() {
  _impl_.judgerid_ = 0u;
}
inline uint32_t SimpleArgs::_internal_judgerid() const {
  return _impl_.judgerid_;
}
inline uint32_t SimpleArgs::judgerid() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleArgs.judgerid)
  return _internal_judgerid();
}
inline void SimpleArgs::_internal_set_judgerid(uint32_t value) {
  
  _impl_.judgerid_ = value;
}
inline void SimpleArgs::set_judgerid(uint32_t value) {
  _internal_set_judgerid(value);
  // @@protoc_insertion_point(field_set:WJudger.SimpleArgs.judgerid)
}

// string token = 2;
inline void SimpleArgs::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& SimpleArgs::token() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleArgs.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleArgs::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WJudger.SimpleArgs.token)
}
inline std::string* SimpleArgs::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:WJudger.SimpleArgs.token)
  return _s;
}
inline const std::string& SimpleArgs::_internal_token() const {
  return _impl_.token_.Get();
}
inline void SimpleArgs::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleArgs::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleArgs::release_token() {
  // @@protoc_insertion_point(field_release:WJudger.SimpleArgs.token)
  return _impl_.token_.Release();
}
inline void SimpleArgs::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WJudger.SimpleArgs.token)
}

// string code = 3;
inline void SimpleArgs::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& SimpleArgs::code() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleArgs.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleArgs::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WJudger.SimpleArgs.code)
}
inline std::string* SimpleArgs::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:WJudger.SimpleArgs.code)
  return _s;
}
inline const std::string& SimpleArgs::_internal_code() const {
  return _impl_.code_.Get();
}
inline void SimpleArgs::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleArgs::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleArgs::release_code() {
  // @@protoc_insertion_point(field_release:WJudger.SimpleArgs.code)
  return _impl_.code_.Release();
}
inline void SimpleArgs::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WJudger.SimpleArgs.code)
}

// .WJudger.Language language = 4;
inline void SimpleArgs::clear_language() {
  _impl_.language_ = 0;
}
inline ::WJudger::Language SimpleArgs::_internal_language() const {
  return static_cast< ::WJudger::Language >(_impl_.language_);
}
inline ::WJudger::Language SimpleArgs::language() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleArgs.language)
  return _internal_language();
}
inline void SimpleArgs::_internal_set_language(::WJudger::Language value) {
  
  _impl_.language_ = value;
}
inline void SimpleArgs::set_language(::WJudger::Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:WJudger.SimpleArgs.language)
}

// string input = 5;
inline void SimpleArgs::clear_input() {
  _impl_.input_.ClearToEmpty();
}
inline const std::string& SimpleArgs::input() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleArgs.input)
  return _internal_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleArgs::set_input(ArgT0&& arg0, ArgT... args) {
 
 _impl_.input_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WJudger.SimpleArgs.input)
}
inline std::string* SimpleArgs::mutable_input() {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:WJudger.SimpleArgs.input)
  return _s;
}
inline const std::string& SimpleArgs::_internal_input() const {
  return _impl_.input_.Get();
}
inline void SimpleArgs::_internal_set_input(const std::string& value) {
  
  _impl_.input_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleArgs::_internal_mutable_input() {
  
  return _impl_.input_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleArgs::release_input() {
  // @@protoc_insertion_point(field_release:WJudger.SimpleArgs.input)
  return _impl_.input_.Release();
}
inline void SimpleArgs::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  _impl_.input_.SetAllocated(input, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_.IsDefault()) {
    _impl_.input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WJudger.SimpleArgs.input)
}

// -------------------------------------------------------------------

// SimpleReply

// .WJudger.JudgeStatus status = 1;
inline void SimpleReply::clear_status() {
  _impl_.status_ = 0;
}
inline ::WJudger::JudgeStatus SimpleReply::_internal_status() const {
  return static_cast< ::WJudger::JudgeStatus >(_impl_.status_);
}
inline ::WJudger::JudgeStatus SimpleReply::status() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleReply.status)
  return _internal_status();
}
inline void SimpleReply::_internal_set_status(::WJudger::JudgeStatus value) {
  
  _impl_.status_ = value;
}
inline void SimpleReply::set_status(::WJudger::JudgeStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:WJudger.SimpleReply.status)
}

// bool compileError = 2;
inline void SimpleReply::clear_compileerror() {
  _impl_.compileerror_ = false;
}
inline bool SimpleReply::_internal_compileerror() const {
  return _impl_.compileerror_;
}
inline bool SimpleReply::compileerror() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleReply.compileError)
  return _internal_compileerror();
}
inline void SimpleReply::_internal_set_compileerror(bool value) {
  
  _impl_.compileerror_ = value;
}
inline void SimpleReply::set_compileerror(bool value) {
  _internal_set_compileerror(value);
  // @@protoc_insertion_point(field_set:WJudger.SimpleReply.compileError)
}

// uint32 runtimeError = 3;
inline void SimpleReply::clear_runtimeerror() {
  _impl_.runtimeerror_ = 0u;
}
inline uint32_t SimpleReply::_internal_runtimeerror() const {
  return _impl_.runtimeerror_;
}
inline uint32_t SimpleReply::runtimeerror() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleReply.runtimeError)
  return _internal_runtimeerror();
}
inline void SimpleReply::_internal_set_runtimeerror(uint32_t value) {
  
  _impl_.runtimeerror_ = value;
}
inline void SimpleReply::set_runtimeerror(uint32_t value) {
  _internal_set_runtimeerror(value);
  // @@protoc_insertion_point(field_set:WJudger.SimpleReply.runtimeError)
}

// string compileErrorMessage = 4;
inline void SimpleReply::clear_compileerrormessage() {
  _impl_.compileerrormessage_.ClearToEmpty();
}
inline const std::string& SimpleReply::compileerrormessage() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleReply.compileErrorMessage)
  return _internal_compileerrormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleReply::set_compileerrormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.compileerrormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WJudger.SimpleReply.compileErrorMessage)
}
inline std::string* SimpleReply::mutable_compileerrormessage() {
  std::string* _s = _internal_mutable_compileerrormessage();
  // @@protoc_insertion_point(field_mutable:WJudger.SimpleReply.compileErrorMessage)
  return _s;
}
inline const std::string& SimpleReply::_internal_compileerrormessage() const {
  return _impl_.compileerrormessage_.Get();
}
inline void SimpleReply::_internal_set_compileerrormessage(const std::string& value) {
  
  _impl_.compileerrormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleReply::_internal_mutable_compileerrormessage() {
  
  return _impl_.compileerrormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleReply::release_compileerrormessage() {
  // @@protoc_insertion_point(field_release:WJudger.SimpleReply.compileErrorMessage)
  return _impl_.compileerrormessage_.Release();
}
inline void SimpleReply::set_allocated_compileerrormessage(std::string* compileerrormessage) {
  if (compileerrormessage != nullptr) {
    
  } else {
    
  }
  _impl_.compileerrormessage_.SetAllocated(compileerrormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.compileerrormessage_.IsDefault()) {
    _impl_.compileerrormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WJudger.SimpleReply.compileErrorMessage)
}

// string runtimeErrorMessage = 5;
inline void SimpleReply::clear_runtimeerrormessage() {
  _impl_.runtimeerrormessage_.ClearToEmpty();
}
inline const std::string& SimpleReply::runtimeerrormessage() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleReply.runtimeErrorMessage)
  return _internal_runtimeerrormessage();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleReply::set_runtimeerrormessage(ArgT0&& arg0, ArgT... args) {
 
 _impl_.runtimeerrormessage_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WJudger.SimpleReply.runtimeErrorMessage)
}
inline std::string* SimpleReply::mutable_runtimeerrormessage() {
  std::string* _s = _internal_mutable_runtimeerrormessage();
  // @@protoc_insertion_point(field_mutable:WJudger.SimpleReply.runtimeErrorMessage)
  return _s;
}
inline const std::string& SimpleReply::_internal_runtimeerrormessage() const {
  return _impl_.runtimeerrormessage_.Get();
}
inline void SimpleReply::_internal_set_runtimeerrormessage(const std::string& value) {
  
  _impl_.runtimeerrormessage_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleReply::_internal_mutable_runtimeerrormessage() {
  
  return _impl_.runtimeerrormessage_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleReply::release_runtimeerrormessage() {
  // @@protoc_insertion_point(field_release:WJudger.SimpleReply.runtimeErrorMessage)
  return _impl_.runtimeerrormessage_.Release();
}
inline void SimpleReply::set_allocated_runtimeerrormessage(std::string* runtimeerrormessage) {
  if (runtimeerrormessage != nullptr) {
    
  } else {
    
  }
  _impl_.runtimeerrormessage_.SetAllocated(runtimeerrormessage, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.runtimeerrormessage_.IsDefault()) {
    _impl_.runtimeerrormessage_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WJudger.SimpleReply.runtimeErrorMessage)
}

// uint64 timeused = 6;
inline void SimpleReply::clear_timeused() {
  _impl_.timeused_ = uint64_t{0u};
}
inline uint64_t SimpleReply::_internal_timeused() const {
  return _impl_.timeused_;
}
inline uint64_t SimpleReply::timeused() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleReply.timeused)
  return _internal_timeused();
}
inline void SimpleReply::_internal_set_timeused(uint64_t value) {
  
  _impl_.timeused_ = value;
}
inline void SimpleReply::set_timeused(uint64_t value) {
  _internal_set_timeused(value);
  // @@protoc_insertion_point(field_set:WJudger.SimpleReply.timeused)
}

// uint64 memoryused = 7;
inline void SimpleReply::clear_memoryused() {
  _impl_.memoryused_ = uint64_t{0u};
}
inline uint64_t SimpleReply::_internal_memoryused() const {
  return _impl_.memoryused_;
}
inline uint64_t SimpleReply::memoryused() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleReply.memoryused)
  return _internal_memoryused();
}
inline void SimpleReply::_internal_set_memoryused(uint64_t value) {
  
  _impl_.memoryused_ = value;
}
inline void SimpleReply::set_memoryused(uint64_t value) {
  _internal_set_memoryused(value);
  // @@protoc_insertion_point(field_set:WJudger.SimpleReply.memoryused)
}

// string output = 8;
inline void SimpleReply::clear_output() {
  _impl_.output_.ClearToEmpty();
}
inline const std::string& SimpleReply::output() const {
  // @@protoc_insertion_point(field_get:WJudger.SimpleReply.output)
  return _internal_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SimpleReply::set_output(ArgT0&& arg0, ArgT... args) {
 
 _impl_.output_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WJudger.SimpleReply.output)
}
inline std::string* SimpleReply::mutable_output() {
  std::string* _s = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:WJudger.SimpleReply.output)
  return _s;
}
inline const std::string& SimpleReply::_internal_output() const {
  return _impl_.output_.Get();
}
inline void SimpleReply::_internal_set_output(const std::string& value) {
  
  _impl_.output_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleReply::_internal_mutable_output() {
  
  return _impl_.output_.Mutable(GetArenaForAllocation());
}
inline std::string* SimpleReply::release_output() {
  // @@protoc_insertion_point(field_release:WJudger.SimpleReply.output)
  return _impl_.output_.Release();
}
inline void SimpleReply::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    
  } else {
    
  }
  _impl_.output_.SetAllocated(output, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_.IsDefault()) {
    _impl_.output_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WJudger.SimpleReply.output)
}

// -------------------------------------------------------------------

// JudgeArgs

// string code = 1;
inline void JudgeArgs::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& JudgeArgs::code() const {
  // @@protoc_insertion_point(field_get:WJudger.JudgeArgs.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JudgeArgs::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WJudger.JudgeArgs.code)
}
inline std::string* JudgeArgs::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:WJudger.JudgeArgs.code)
  return _s;
}
inline const std::string& JudgeArgs::_internal_code() const {
  return _impl_.code_.Get();
}
inline void JudgeArgs::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* JudgeArgs::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* JudgeArgs::release_code() {
  // @@protoc_insertion_point(field_release:WJudger.JudgeArgs.code)
  return _impl_.code_.Release();
}
inline void JudgeArgs::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WJudger.JudgeArgs.code)
}

// .WJudger.Language language = 2;
inline void JudgeArgs::clear_language() {
  _impl_.language_ = 0;
}
inline ::WJudger::Language JudgeArgs::_internal_language() const {
  return static_cast< ::WJudger::Language >(_impl_.language_);
}
inline ::WJudger::Language JudgeArgs::language() const {
  // @@protoc_insertion_point(field_get:WJudger.JudgeArgs.language)
  return _internal_language();
}
inline void JudgeArgs::_internal_set_language(::WJudger::Language value) {
  
  _impl_.language_ = value;
}
inline void JudgeArgs::set_language(::WJudger::Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:WJudger.JudgeArgs.language)
}

// uint64 timelimit = 3;
inline void JudgeArgs::clear_timelimit() {
  _impl_.timelimit_ = uint64_t{0u};
}
inline uint64_t JudgeArgs::_internal_timelimit() const {
  return _impl_.timelimit_;
}
inline uint64_t JudgeArgs::timelimit() const {
  // @@protoc_insertion_point(field_get:WJudger.JudgeArgs.timelimit)
  return _internal_timelimit();
}
inline void JudgeArgs::_internal_set_timelimit(uint64_t value) {
  
  _impl_.timelimit_ = value;
}
inline void JudgeArgs::set_timelimit(uint64_t value) {
  _internal_set_timelimit(value);
  // @@protoc_insertion_point(field_set:WJudger.JudgeArgs.timelimit)
}

// double memorylimit = 4;
inline void JudgeArgs::clear_memorylimit() {
  _impl_.memorylimit_ = 0;
}
inline double JudgeArgs::_internal_memorylimit() const {
  return _impl_.memorylimit_;
}
inline double JudgeArgs::memorylimit() const {
  // @@protoc_insertion_point(field_get:WJudger.JudgeArgs.memorylimit)
  return _internal_memorylimit();
}
inline void JudgeArgs::_internal_set_memorylimit(double value) {
  
  _impl_.memorylimit_ = value;
}
inline void JudgeArgs::set_memorylimit(double value) {
  _internal_set_memorylimit(value);
  // @@protoc_insertion_point(field_set:WJudger.JudgeArgs.memorylimit)
}

// uint32 dataId = 5;
inline void JudgeArgs::clear_dataid() {
  _impl_.dataid_ = 0u;
}
inline uint32_t JudgeArgs::_internal_dataid() const {
  return _impl_.dataid_;
}
inline uint32_t JudgeArgs::dataid() const {
  // @@protoc_insertion_point(field_get:WJudger.JudgeArgs.dataId)
  return _internal_dataid();
}
inline void JudgeArgs::_internal_set_dataid(uint32_t value) {
  
  _impl_.dataid_ = value;
}
inline void JudgeArgs::set_dataid(uint32_t value) {
  _internal_set_dataid(value);
  // @@protoc_insertion_point(field_set:WJudger.JudgeArgs.dataId)
}

// -------------------------------------------------------------------

// JudgeReply

// .WJudger.JudgeReply.ResultType resultType = 1;
inline void JudgeReply::clear_resulttype() {
  _impl_.resulttype_ = 0;
}
inline ::WJudger::JudgeReply_ResultType JudgeReply::_internal_resulttype() const {
  return static_cast< ::WJudger::JudgeReply_ResultType >(_impl_.resulttype_);
}
inline ::WJudger::JudgeReply_ResultType JudgeReply::resulttype() const {
  // @@protoc_insertion_point(field_get:WJudger.JudgeReply.resultType)
  return _internal_resulttype();
}
inline void JudgeReply::_internal_set_resulttype(::WJudger::JudgeReply_ResultType value) {
  
  _impl_.resulttype_ = value;
}
inline void JudgeReply::set_resulttype(::WJudger::JudgeReply_ResultType value) {
  _internal_set_resulttype(value);
  // @@protoc_insertion_point(field_set:WJudger.JudgeReply.resultType)
}

// .WJudger.CompileResult compileResult = 2;
inline bool JudgeReply::_internal_has_compileresult() const {
  return this != internal_default_instance() && _impl_.compileresult_ != nullptr;
}
inline bool JudgeReply::has_compileresult() const {
  return _internal_has_compileresult();
}
inline void JudgeReply::clear_compileresult() {
  if (GetArenaForAllocation() == nullptr && _impl_.compileresult_ != nullptr) {
    delete _impl_.compileresult_;
  }
  _impl_.compileresult_ = nullptr;
}
inline const ::WJudger::CompileResult& JudgeReply::_internal_compileresult() const {
  const ::WJudger::CompileResult* p = _impl_.compileresult_;
  return p != nullptr ? *p : reinterpret_cast<const ::WJudger::CompileResult&>(
      ::WJudger::_CompileResult_default_instance_);
}
inline const ::WJudger::CompileResult& JudgeReply::compileresult() const {
  // @@protoc_insertion_point(field_get:WJudger.JudgeReply.compileResult)
  return _internal_compileresult();
}
inline void JudgeReply::unsafe_arena_set_allocated_compileresult(
    ::WJudger::CompileResult* compileresult) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compileresult_);
  }
  _impl_.compileresult_ = compileresult;
  if (compileresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WJudger.JudgeReply.compileResult)
}
inline ::WJudger::CompileResult* JudgeReply::release_compileresult() {
  
  ::WJudger::CompileResult* temp = _impl_.compileresult_;
  _impl_.compileresult_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::WJudger::CompileResult* JudgeReply::unsafe_arena_release_compileresult() {
  // @@protoc_insertion_point(field_release:WJudger.JudgeReply.compileResult)
  
  ::WJudger::CompileResult* temp = _impl_.compileresult_;
  _impl_.compileresult_ = nullptr;
  return temp;
}
inline ::WJudger::CompileResult* JudgeReply::_internal_mutable_compileresult() {
  
  if (_impl_.compileresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::WJudger::CompileResult>(GetArenaForAllocation());
    _impl_.compileresult_ = p;
  }
  return _impl_.compileresult_;
}
inline ::WJudger::CompileResult* JudgeReply::mutable_compileresult() {
  ::WJudger::CompileResult* _msg = _internal_mutable_compileresult();
  // @@protoc_insertion_point(field_mutable:WJudger.JudgeReply.compileResult)
  return _msg;
}
inline void JudgeReply::set_allocated_compileresult(::WJudger::CompileResult* compileresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.compileresult_;
  }
  if (compileresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(compileresult);
    if (message_arena != submessage_arena) {
      compileresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compileresult, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.compileresult_ = compileresult;
  // @@protoc_insertion_point(field_set_allocated:WJudger.JudgeReply.compileResult)
}

// .WJudger.ExecuteResult executeResult = 3;
inline bool JudgeReply::_internal_has_executeresult() const {
  return this != internal_default_instance() && _impl_.executeresult_ != nullptr;
}
inline bool JudgeReply::has_executeresult() const {
  return _internal_has_executeresult();
}
inline void JudgeReply::clear_executeresult() {
  if (GetArenaForAllocation() == nullptr && _impl_.executeresult_ != nullptr) {
    delete _impl_.executeresult_;
  }
  _impl_.executeresult_ = nullptr;
}
inline const ::WJudger::ExecuteResult& JudgeReply::_internal_executeresult() const {
  const ::WJudger::ExecuteResult* p = _impl_.executeresult_;
  return p != nullptr ? *p : reinterpret_cast<const ::WJudger::ExecuteResult&>(
      ::WJudger::_ExecuteResult_default_instance_);
}
inline const ::WJudger::ExecuteResult& JudgeReply::executeresult() const {
  // @@protoc_insertion_point(field_get:WJudger.JudgeReply.executeResult)
  return _internal_executeresult();
}
inline void JudgeReply::unsafe_arena_set_allocated_executeresult(
    ::WJudger::ExecuteResult* executeresult) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.executeresult_);
  }
  _impl_.executeresult_ = executeresult;
  if (executeresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WJudger.JudgeReply.executeResult)
}
inline ::WJudger::ExecuteResult* JudgeReply::release_executeresult() {
  
  ::WJudger::ExecuteResult* temp = _impl_.executeresult_;
  _impl_.executeresult_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::WJudger::ExecuteResult* JudgeReply::unsafe_arena_release_executeresult() {
  // @@protoc_insertion_point(field_release:WJudger.JudgeReply.executeResult)
  
  ::WJudger::ExecuteResult* temp = _impl_.executeresult_;
  _impl_.executeresult_ = nullptr;
  return temp;
}
inline ::WJudger::ExecuteResult* JudgeReply::_internal_mutable_executeresult() {
  
  if (_impl_.executeresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::WJudger::ExecuteResult>(GetArenaForAllocation());
    _impl_.executeresult_ = p;
  }
  return _impl_.executeresult_;
}
inline ::WJudger::ExecuteResult* JudgeReply::mutable_executeresult() {
  ::WJudger::ExecuteResult* _msg = _internal_mutable_executeresult();
  // @@protoc_insertion_point(field_mutable:WJudger.JudgeReply.executeResult)
  return _msg;
}
inline void JudgeReply::set_allocated_executeresult(::WJudger::ExecuteResult* executeresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.executeresult_;
  }
  if (executeresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(executeresult);
    if (message_arena != submessage_arena) {
      executeresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, executeresult, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.executeresult_ = executeresult;
  // @@protoc_insertion_point(field_set_allocated:WJudger.JudgeReply.executeResult)
}

// -------------------------------------------------------------------

// CompileResult

// bool compileEror = 1;
inline void CompileResult::clear_compileeror() {
  _impl_.compileeror_ = false;
}
inline bool CompileResult::_internal_compileeror() const {
  return _impl_.compileeror_;
}
inline bool CompileResult::compileeror() const {
  // @@protoc_insertion_point(field_get:WJudger.CompileResult.compileEror)
  return _internal_compileeror();
}
inline void CompileResult::_internal_set_compileeror(bool value) {
  
  _impl_.compileeror_ = value;
}
inline void CompileResult::set_compileeror(bool value) {
  _internal_set_compileeror(value);
  // @@protoc_insertion_point(field_set:WJudger.CompileResult.compileEror)
}

// repeated string testcases = 2;
inline int CompileResult::_internal_testcases_size() const {
  return _impl_.testcases_.size();
}
inline int CompileResult::testcases_size() const {
  return _internal_testcases_size();
}
inline void CompileResult::clear_testcases() {
  _impl_.testcases_.Clear();
}
inline std::string* CompileResult::add_testcases() {
  std::string* _s = _internal_add_testcases();
  // @@protoc_insertion_point(field_add_mutable:WJudger.CompileResult.testcases)
  return _s;
}
inline const std::string& CompileResult::_internal_testcases(int index) const {
  return _impl_.testcases_.Get(index);
}
inline const std::string& CompileResult::testcases(int index) const {
  // @@protoc_insertion_point(field_get:WJudger.CompileResult.testcases)
  return _internal_testcases(index);
}
inline std::string* CompileResult::mutable_testcases(int index) {
  // @@protoc_insertion_point(field_mutable:WJudger.CompileResult.testcases)
  return _impl_.testcases_.Mutable(index);
}
inline void CompileResult::set_testcases(int index, const std::string& value) {
  _impl_.testcases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:WJudger.CompileResult.testcases)
}
inline void CompileResult::set_testcases(int index, std::string&& value) {
  _impl_.testcases_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:WJudger.CompileResult.testcases)
}
inline void CompileResult::set_testcases(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.testcases_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:WJudger.CompileResult.testcases)
}
inline void CompileResult::set_testcases(int index, const char* value, size_t size) {
  _impl_.testcases_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:WJudger.CompileResult.testcases)
}
inline std::string* CompileResult::_internal_add_testcases() {
  return _impl_.testcases_.Add();
}
inline void CompileResult::add_testcases(const std::string& value) {
  _impl_.testcases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:WJudger.CompileResult.testcases)
}
inline void CompileResult::add_testcases(std::string&& value) {
  _impl_.testcases_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:WJudger.CompileResult.testcases)
}
inline void CompileResult::add_testcases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.testcases_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:WJudger.CompileResult.testcases)
}
inline void CompileResult::add_testcases(const char* value, size_t size) {
  _impl_.testcases_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:WJudger.CompileResult.testcases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompileResult::testcases() const {
  // @@protoc_insertion_point(field_list:WJudger.CompileResult.testcases)
  return _impl_.testcases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompileResult::mutable_testcases() {
  // @@protoc_insertion_point(field_mutable_list:WJudger.CompileResult.testcases)
  return &_impl_.testcases_;
}

// -------------------------------------------------------------------

// ExecuteResult

// string testcase = 1;
inline void ExecuteResult::clear_testcase() {
  _impl_.testcase_.ClearToEmpty();
}
inline const std::string& ExecuteResult::testcase() const {
  // @@protoc_insertion_point(field_get:WJudger.ExecuteResult.testcase)
  return _internal_testcase();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecuteResult::set_testcase(ArgT0&& arg0, ArgT... args) {
 
 _impl_.testcase_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WJudger.ExecuteResult.testcase)
}
inline std::string* ExecuteResult::mutable_testcase() {
  std::string* _s = _internal_mutable_testcase();
  // @@protoc_insertion_point(field_mutable:WJudger.ExecuteResult.testcase)
  return _s;
}
inline const std::string& ExecuteResult::_internal_testcase() const {
  return _impl_.testcase_.Get();
}
inline void ExecuteResult::_internal_set_testcase(const std::string& value) {
  
  _impl_.testcase_.Set(value, GetArenaForAllocation());
}
inline std::string* ExecuteResult::_internal_mutable_testcase() {
  
  return _impl_.testcase_.Mutable(GetArenaForAllocation());
}
inline std::string* ExecuteResult::release_testcase() {
  // @@protoc_insertion_point(field_release:WJudger.ExecuteResult.testcase)
  return _impl_.testcase_.Release();
}
inline void ExecuteResult::set_allocated_testcase(std::string* testcase) {
  if (testcase != nullptr) {
    
  } else {
    
  }
  _impl_.testcase_.SetAllocated(testcase, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.testcase_.IsDefault()) {
    _impl_.testcase_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WJudger.ExecuteResult.testcase)
}

// uint64 timeused = 2;
inline void ExecuteResult::clear_timeused() {
  _impl_.timeused_ = uint64_t{0u};
}
inline uint64_t ExecuteResult::_internal_timeused() const {
  return _impl_.timeused_;
}
inline uint64_t ExecuteResult::timeused() const {
  // @@protoc_insertion_point(field_get:WJudger.ExecuteResult.timeused)
  return _internal_timeused();
}
inline void ExecuteResult::_internal_set_timeused(uint64_t value) {
  
  _impl_.timeused_ = value;
}
inline void ExecuteResult::set_timeused(uint64_t value) {
  _internal_set_timeused(value);
  // @@protoc_insertion_point(field_set:WJudger.ExecuteResult.timeused)
}

// double memoryused = 3;
inline void ExecuteResult::clear_memoryused() {
  _impl_.memoryused_ = 0;
}
inline double ExecuteResult::_internal_memoryused() const {
  return _impl_.memoryused_;
}
inline double ExecuteResult::memoryused() const {
  // @@protoc_insertion_point(field_get:WJudger.ExecuteResult.memoryused)
  return _internal_memoryused();
}
inline void ExecuteResult::_internal_set_memoryused(double value) {
  
  _impl_.memoryused_ = value;
}
inline void ExecuteResult::set_memoryused(double value) {
  _internal_set_memoryused(value);
  // @@protoc_insertion_point(field_set:WJudger.ExecuteResult.memoryused)
}

// uint32 score = 4;
inline void ExecuteResult::clear_score() {
  _impl_.score_ = 0u;
}
inline uint32_t ExecuteResult::_internal_score() const {
  return _impl_.score_;
}
inline uint32_t ExecuteResult::score() const {
  // @@protoc_insertion_point(field_get:WJudger.ExecuteResult.score)
  return _internal_score();
}
inline void ExecuteResult::_internal_set_score(uint32_t value) {
  
  _impl_.score_ = value;
}
inline void ExecuteResult::set_score(uint32_t value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:WJudger.ExecuteResult.score)
}

// string verdict = 5;
inline void ExecuteResult::clear_verdict() {
  _impl_.verdict_.ClearToEmpty();
}
inline const std::string& ExecuteResult::verdict() const {
  // @@protoc_insertion_point(field_get:WJudger.ExecuteResult.verdict)
  return _internal_verdict();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecuteResult::set_verdict(ArgT0&& arg0, ArgT... args) {
 
 _impl_.verdict_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WJudger.ExecuteResult.verdict)
}
inline std::string* ExecuteResult::mutable_verdict() {
  std::string* _s = _internal_mutable_verdict();
  // @@protoc_insertion_point(field_mutable:WJudger.ExecuteResult.verdict)
  return _s;
}
inline const std::string& ExecuteResult::_internal_verdict() const {
  return _impl_.verdict_.Get();
}
inline void ExecuteResult::_internal_set_verdict(const std::string& value) {
  
  _impl_.verdict_.Set(value, GetArenaForAllocation());
}
inline std::string* ExecuteResult::_internal_mutable_verdict() {
  
  return _impl_.verdict_.Mutable(GetArenaForAllocation());
}
inline std::string* ExecuteResult::release_verdict() {
  // @@protoc_insertion_point(field_release:WJudger.ExecuteResult.verdict)
  return _impl_.verdict_.Release();
}
inline void ExecuteResult::set_allocated_verdict(std::string* verdict) {
  if (verdict != nullptr) {
    
  } else {
    
  }
  _impl_.verdict_.SetAllocated(verdict, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.verdict_.IsDefault()) {
    _impl_.verdict_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WJudger.ExecuteResult.verdict)
}

// string msg = 6;
inline void ExecuteResult::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& ExecuteResult::msg() const {
  // @@protoc_insertion_point(field_get:WJudger.ExecuteResult.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExecuteResult::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:WJudger.ExecuteResult.msg)
}
inline std::string* ExecuteResult::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:WJudger.ExecuteResult.msg)
  return _s;
}
inline const std::string& ExecuteResult::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void ExecuteResult::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* ExecuteResult::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* ExecuteResult::release_msg() {
  // @@protoc_insertion_point(field_release:WJudger.ExecuteResult.msg)
  return _impl_.msg_.Release();
}
inline void ExecuteResult::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:WJudger.ExecuteResult.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace WJudger

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::WJudger::JudgeReply_ResultType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WJudger::JudgeReply_ResultType>() {
  return ::WJudger::JudgeReply_ResultType_descriptor();
}
template <> struct is_proto_enum< ::WJudger::JudgeStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WJudger::JudgeStatus>() {
  return ::WJudger::JudgeStatus_descriptor();
}
template <> struct is_proto_enum< ::WJudger::Language> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::WJudger::Language>() {
  return ::WJudger::Language_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wjudger_2eproto
